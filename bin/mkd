#!/usr/bin/env bash
__mkd() {
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  PROG="mkd"
  USER="${SUDO_USER:-${USER}}"
  HOME="${USER_HOME:-${HOME}}"
  SRC_DIR="${BASH_SOURCE%/*}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  #set opts

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ##@Version       : 202207042253-git
  # @Author        : Jason Hempstead
  # @Contact       : jason@casjaysdev.com
  # @License       : WTFPL
  # @ReadME        : mkd --help
  # @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
  # @Created       : Thursday, Mar 11, 2021 11:01 EST
  # @File          : mkd
  # @Description   : create directory and cd into it
  # @TODO          :
  # @Other         :
  # @Resource      :
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Main function
  if [ -f "$SRC_DIR/functions.bash" ]; then local DIR="$SRC_DIR"; else local DIR="$HOME/.local/bin"; fi
  if [[ -f "$DIR/functions.bash" ]]; then
    . "$DIR/functions.bash"
  else
    printf "\t\t\\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $DIR"
    return 1
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __version() { app_version; }
  __help() {
    app_help "Usage:    mkd directorytoCreate" \
      "-v, --version          -  display version" \
      "-h, --help             -  display help"
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # App functions
  __change_dir() {
    if [ -d "$1" ]; then
      printf_green "Creating $DIR_TO_CREATE and entering the directory"
      printf_cyan "Type exit to return to your previous directory"
      builtin cd "$1" || return
      $SHELL
    else
      printf_return "Failed to create $1"
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __create() {
    local DIR_TO_CREATE="${1:-$DIR_TO_CREATE}"
    if [ ! -d "$DIR_TO_CREATE" ]; then
      if printf_mkdir "$DIR_TO_CREATE" 2>/dev/null; then
        true
      else
        printf_exit "Failed to create $DIR_TO_CREATE"
        exitCode=1
      fi
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __cd() {
    if cmd_exists cdd; then
      if [[ "$CDD_STATUS" = "running" ]]; then
        if [[ "$CDD_DIR/$1" = "$CDD_DIR"/** ]] || [[ "$1" = ./** ]] || [[ "$1" != ".." ]] || [ "$1" = "" ]; then
          __create "${DIR_TO_CREATE//$CDD_DIR\//}" || return 1
        else
          printf_red "Creating directories outside of $CDD_DIR is forbidden"
        fi
      else
        __create "$DIR_TO_CREATE" || return 1
      fi
    else
      __create "$DIR_TO_CREATE" || return 1
    fi
    __change_dir "$DIR_TO_CREATE"
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  case $1 in
  -v | --version) __version ;;
  -h | --help) __help ;;
  esac
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ $# = 0 ] && __help
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  local DIR_TO_CREATE="$*"
  local failed=0
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ $# -gt 1 ]; then
    for dir in $DIR_TO_CREATE; do
      printf_green "Creating the directory: $dir"
      mkdir -p "$dir" 2>/dev/null || failed+=1
      [ $failed = 0 ] || printf_red "Failed to create $dir"
    done
  elif [ -n "$DIR_TO_CREATE" ]; then
    __cd "$DIR_TO_CREATE" && exitCode=0 || exitCode=1
  else
    __help
    exitCode=1
  fi
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
__mkd "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
