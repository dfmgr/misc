#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202209041659-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.com
# @@License          :  WTFPL
# @@ReadME           :  setup_deno --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Sep 04, 2022 16:59 EDT
# @@File             :  setup_deno
# @@Description      :
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/user
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0" 2>/dev/null)"
VERSION="202209041659-git"
HOME="${USER_HOME:-$HOME}"
USER="${SUDO_USER:-$USER}"
RUN_USER="${SUDO_USER:-$USER}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
SETUP_DENO_REQUIRE_SUDO="${SETUP_DENO_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function file
if [ -f "$SCRIPT_SRC_DIR/functions.bash" ]; then
  FUNCTIONS_DIR="$SCRIPT_SRC_DIR"
  . "$FUNCTIONS_DIR/functions.bash"
elif [ -f "$HOME/.local/bin/functions.bash" ]; then
  FUNCTIONS_DIR="$HOME/.local/bin"
  . "$FUNCTIONS_DIR/functions.bash"
else
  printf "\033[0;31m%s \033[0m\n" "Couldn't source the functions file from ${FUNCTIONS_DIR:-$SCRIPT_SRC_DIR}"
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 1 --retry 0 "${1:-http://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g'
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE"
  fi
  [ -d "$SETUP_DENO_CONFIG_DIR" ] || mkdir -p "$SETUP_DENO_CONFIG_DIR"
  [ -d "$SETUP_DENO_CONFIG_BACKUP_DIR" ] || mkdir -p "$SETUP_DENO_CONFIG_BACKUP_DIR"
  [ -f "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE" ] &&
    cp -Rf "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE" "$SETUP_DENO_CONFIG_BACKUP_DIR/$SETUP_DENO_CONFIG_FILE.$$"
  cat <<EOF >"$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE"
# Settings for setup_deno
SETUP_DENO_INSTALL_DIR="${DENO_INSTALL:-}"
SETUP_DENO_INSTALL_X64="${SETUP_DENO_INSTALL_X64:-}"
SETUP_DENO_INSTALL_ARM="${SETUP_DENO_INSTALL_ARM:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SETUP_DENO_OUTPUT_COLOR_1="${SETUP_DENO_OUTPUT_COLOR_1:-}"
SETUP_DENO_OUTPUT_COLOR_2="${SETUP_DENO_OUTPUT_COLOR_2:-}"
SETUP_DENO_OUTPUT_COLOR_GOOD="${SETUP_DENO_OUTPUT_COLOR_GOOD:-}"
SETUP_DENO_OUTPUT_COLOR_ERROR="${SETUP_DENO_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SETUP_DENO_NOTIFY_ENABLED="${SETUP_DENO_NOTIFY_ENABLED:-}"
SETUP_DENO_GOOD_NAME="${SETUP_DENO_GOOD_NAME:-}"
SETUP_DENO_ERROR_NAME="${SETUP_DENO_ERROR_NAME:-}"
SETUP_DENO_GOOD_MESSAGE="${SETUP_DENO_GOOD_MESSAGE:-}"
SETUP_DENO_ERROR_MESSAGE="${SETUP_DENO_ERROR_MESSAGE:-}"
SETUP_DENO_NOTIFY_CLIENT_NAME="${SETUP_DENO_NOTIFY_CLIENT_NAME:-}"
SETUP_DENO_NOTIFY_CLIENT_ICON="${SETUP_DENO_NOTIFY_CLIENT_ICON:-}"
SETUP_DENO_NOTIFY_CLIENT_URGENCY="${SETUP_DENO_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "setup_deno:  - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: setup_deno [options] [commands]"
  __printf_line " - "
  __printf_line " - "
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  { [ $(id -u) -ne 0 ] || [ $EUID -ne 0 ] || [ "$WHOAMI" != "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() { ask_for_password sudo true && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -s "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$SETUP_DENO_REQUIRE_SUDO" = "yes" ] && [ -z "$SETUP_DENO_REQUIRE_SUDO_RUN" ]; then
    export SETUP_DENO_REQUIRE_SUDO="no"
    export SETUP_DENO_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-$?}
  [ -f "$SETUP_DENO_TEMP_FILE" ] && rm -Rf "$SETUP_DENO_TEMP_FILE" &>/dev/null
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__deno_install() {
  if [ "$SETUP_DENO_FORCE_INST" != "true" ] && __cmd_exists deno; then
    printf_green "deno is already installed "
    printf_blue "run $APPNAME --install to updated"
    return 0
  else
    printf_green "Attempting to install deno"
    [ -d "$SETUP_DENO_INSTALL_DIR/bin" ] || mkdir -p "$SETUP_DENO_INSTALL_DIR/bin"
    if [ "$(uname -m)" = "x86_64" ]; then
      curl -q -LSsf "$SETUP_DENO_INSTALL_X64" | bash &>/dev/null
    elif [ "$(uname -m)" = "aarch64" ]; then
      curl -q -LSsf "$SETUP_DENO_INSTALL_ARM" -o "/tmp/deno.zip"
      if [ -f "/tmp/deno.zip" ]; then
        cd /tmp && unzip deno.zip &>/dev/null && mv -f "/tmp/deno" "$SETUP_DENO_INSTALL_DIR/bin/deno"
        [ -f "/tmp/deno.zip" ] && rm -Rf "/tmp/deno.zip"
      else
        printf_exit "Failed to download $SETUP_DENO_INSTALL_ARM"
      fi
    else
      printf_exit "Only x86_64 and ARM64 architecture is supported"
    fi
    prog="$(command -v deno 2>/dev/null || echo '')"
  fi
  if [ -n "$prog" ]; then
    if deno --help 2>&1 | grep -q 'execute binary file' &>/dev/null; then
      printf_red "Unsupported architecture detected"
      rm -Rf "$prog"
      exit 1
    elif type -P deno &>/dev/null; then
      printf_green "deno has been installed"
      exitCode=0
    fi
  else
    printf_red "Failed to install deno"
    exitCode=1
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
SETUP_DENO_CONFIG_FILE="${SETUP_DENO_CONFIG_FILE:-settings.conf}"
SETUP_DENO_CONFIG_DIR="${SETUP_DENO_CONFIG_DIR:-$HOME/.config/misc/settings/setup_deno}"
SETUP_DENO_CONFIG_BACKUP_DIR="${SETUP_DENO_CONFIG_BACKUP_DIR:-$HOME/.local/share/misc/settings/setup_deno/backups}"
SETUP_DENO_LOG_DIR="${SETUP_DENO_LOG_DIR:-$HOME/.local/log/setup_deno}"
SETUP_DENO_TEMP_DIR="${SETUP_DENO_TEMP_DIR:-$HOME/.local/tmp/system_scripts/setup_deno}"
SETUP_DENO_CACHE_DIR="${SETUP_DENO_CACHE_DIR:-$HOME/.cache/setup_deno}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SETUP_DENO_OUTPUT_COLOR_1="${SETUP_DENO_OUTPUT_COLOR_1:-4}"
SETUP_DENO_OUTPUT_COLOR_2="${SETUP_DENO_OUTPUT_COLOR_2:-5}"
SETUP_DENO_OUTPUT_COLOR_GOOD="${SETUP_DENO_OUTPUT_COLOR_GOOD:-2}"
SETUP_DENO_OUTPUT_COLOR_ERROR="${SETUP_DENO_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SETUP_DENO_NOTIFY_ENABLED="${SETUP_DENO_NOTIFY_ENABLED:-yes}"
SETUP_DENO_GOOD_NAME="${SETUP_DENO_GOOD_NAME:-Great:}"
SETUP_DENO_ERROR_NAME="${SETUP_DENO_ERROR_NAME:-Error:}"
SETUP_DENO_GOOD_MESSAGE="${SETUP_DENO_GOOD_MESSAGE:-No errors reported}"
SETUP_DENO_ERROR_MESSAGE="${SETUP_DENO_ERROR_MESSAGE:-Errors were reported}"
SETUP_DENO_NOTIFY_CLIENT_NAME="${SETUP_DENO_NOTIFY_CLIENT_NAME:-$APPNAME}"
SETUP_DENO_NOTIFY_CLIENT_ICON="${SETUP_DENO_NOTIFY_CLIENT_ICON:-notification-new}"
SETUP_DENO_NOTIFY_CLIENT_URGENCY="${SETUP_DENO_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
SETUP_DENO_INSTALL_DIR="${DENO_INSTALL:-$HOME/.local/share/deno}"
SETUP_DENO_INSTALL_X64="${SETUP_DENO_INSTALL_X64:-https://deno.land/x/install/install.sh}"
SETUP_DENO_INSTALL_ARM="${SETUP_DENO_INSTALL_ARM:-https://github.com/LukeChannings/deno-arm64/releases/latest/download/deno-linux-arm64.zip}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE" ] ||
  [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE" ] &&
  . "$SETUP_DENO_CONFIG_DIR/$SETUP_DENO_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$SETUP_DENO_LOG_DIR" ] ||
  mkdir -p "$SETUP_DENO_LOG_DIR" |& __devnull
[ -d "$SETUP_DENO_TEMP_DIR" ] ||
  mkdir -p "$SETUP_DENO_TEMP_DIR" |& __devnull
[ -d "$SETUP_DENO_CACHE_DIR" ] ||
  mkdir -p "$SETUP_DENO_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETUP_DENO_TEMP_FILE="${SETUP_DENO_TEMP_FILE:-$(mktemp $SETUP_DENO_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$SETUP_DENO_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    set +x
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$SETUP_DENO_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$SETUP_DENO_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$SETUP_DENO_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$SETUP_DENO_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$SETUP_DENO_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
    retval=$?
    return $retval
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom icons

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",force,install"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    SETUP_DENO_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    SETUP_DENO_CWD="$2"
    # [ -d "$SETUP_DENO_CWD" ] || mkdir -p "$SETUP_DENO_CWD" |& __devnull
    shift 2
    ;;
  --force | --install)
    shift 1
    SETUP_DENO_FORCE_INST="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# SETUP_DENO_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# SETUP_DENO_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && SETUP_DENO_CWD="$1" && shift 1 || SETUP_DENO_CWD="${SETUP_DENO_CWD:-$PWD}"
SETUP_DENO_CWD="$(realpath "${SETUP_DENO_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$SETUP_DENO_CWD" ] && cd "$SETUP_DENO_CWD"; then
# if [ "$SETUP_DENO_SILENT" != "true" ] || [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $SETUP_DENO_CWD"
# fi
# else
# printf_exit "💔 $SETUP_DENO_CWD does not exist 💔"
# fi
export SETUP_DENO_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Redefine functions based on options

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
export DENO_INSTALL="$SETUP_DENO_INSTALL_DIR" PATH="$SETUP_DENO_INSTALL_DIR/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__deno_install "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-$?}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
