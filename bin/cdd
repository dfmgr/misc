#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202207042253-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : cdd --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Tuesday, Mar 23, 2021 07:41 EDT
# @File          : cdd
# @Description   : cd into directories using shortcuts
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="$(basename "$0")"
VERSION="202103230741-git"
HOME="${USER_HOME:-${HOME}}"
USER="${SUDO_USER:-${USER}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function file
cdd_main() {
  if [[ -f "$SRC_DIR/functions.bash" ]]; then
    FUNCTIONS_DIR="$SRC_DIR"
    . "$FUNCTIONS_DIR/functions.bash"
  elif [[ -f "$HOME/.local/bin/functions.bash" ]]; then
    FUNCTIONS_DIR="$HOME/.local/bin"
    . "$FUNCTIONS_DIR/functions.bash"
  else
    printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $FUNCTIONS_DIR"
    return 1
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # helper functions - See github.com/dfmgr/misc/bin/functions.bash
  __version() { app_version; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __help() {
    app_help "4" "Usage: cdd  aliasName  -  cdd -l" \
      "-d, --delete           -  delete all files in dir" \
      "-l, --list             -  list aliases" \
      "-m, --modify           -  add an alias | -m p testing" \
      "-r, --remove           -  remove an alias | -r testing" \
      "-c, --config           -  create config file" \
      "-s, --shell            -  change shell" \
      "-v, --version          -  display version" \
      "-h, --help             -  display help" \
      "--options              -  used by completions"
    exit $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __gen_config() {
    printf_green "Generating the aliases file in"
    printf_green "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE"
    CDD_GREP_COLORS="${CDD_GREP_COLORS:-$GREP_COLORS}"
    CDD_ALIAS_FILE="${CDD_ALIAS_FILE:-aliases}"
    cat <<EOF >"$CDD_CONFIG_DIR/$CDD_CONFIG_FILE"
# Settings for cdd
CDD_OPTIONS_DEFAULT_PROJECT_NAME="${CDD_OPTIONS_DEFAULT_PROJECT_NAME:-default}"
CDD_OPTIONS_PROJECT_DIR="${CDD_OPTIONS_PROJECT_DIR:-$HOME/.local/share/cdd/projects}"
CDD_OPTIONS_TMP_DIR="${CDD_OPTIONS_TMP_DIR:-$HOME/.local/tmp/cdd}"
EOF

    if [[ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ]] || [[ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]]; then
      printf_green "Your config file for cdd has been created"
      true
    else
      printf_red "Failed to create the config file"
      false
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __gen_alias() {
    if [[ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]]; then
      local cdd_update=true
      printf_green "Updating the aliases file in"
    else
      printf_green "Generating the aliases file in"
    fi
    printf_green "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
    local tempfile="$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.bak"
    [[ -d "$CDD_CONFIG_DIR" ]] || mkdir -p "$CDD_CONFIG_DIR"
    [[ -d "$CDD_CONFIG_BACKUP_DIR" ]] || mkdir -p "$CDD_CONFIG_BACKUP_DIR"
    [[ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]] && cp -Rf "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" "$tempfile"
    cat <<EOF >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
# Alias settings for cdd - format: name = "/mydir"
default = "$CDD_OPTIONS_PROJECT_DIR/${CDD_OPTIONS_DEFAULT_PROJECT_NAME}"
screen = "$CDD_OPTIONS_PROJECT_DIR/dev-screen"
tmux = "$CDD_OPTIONS_PROJECT_DIR/dev-tmux"
testing = "${TMPDIR:-/tmp}/testing"
projects = "$HOME/Projects"
pictures = "$HOME/Pictures"
music = "$HOME/Music"
share = "$HOME/.local/share"

EOF

    if [[ -f "$tempfile" ]] && [[ "$(<"$tempfile")" != "$(<"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE")" ]]; then
      cp -Rf "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" "$CDD_CONFIG_BACKUP_DIR/$CDD_ALIAS_FILE.$$"
      printf '%s' '# Settings for '$PROG'\n' >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
      grep -v ^'# Settings' "$tempfile" | sort -u | grep -v '^$' >>"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
      printf '\n' >>"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
    fi
    if [[ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]] && [[ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ]]; then
      printf_green "Your config file for cdd has been created"
      true
    else
      printf_red "Failed to create the config file"
      false
    fi
    return $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  quit() { printf_red "Exiting the cdd enviroment" && sleep 3 && builtin exit &>/dev/null; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  _cd() {
    _find() { find ${1:-$PWD/} -maxdepth 1 -type d 2>/dev/null | sed 's|'"$CDD_CWD_DIR/"'||g' | grep -sv '^$'; }
    local prev=
    local COMPREPLY=($(compgen -W '$(_find ${cur})' -- "${cur}"))
  } && complete -F _cd cd
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  cd_cdd() {
    if [[ -z "$CDD_CWD_DIR" ]]; then
      builtin cd "$1" || return 1
    else
      cd() { export CD_CMD="cdd" && cd_cdd "$@"; }
      printf_return() { printf_red "$*" && return 1; }
      local REPO_UPDATED
      local CD_INTO_DIR="${1:-$CDD_CWD_DIR}"
      local CD_INTO_CUR="$CDD_CWD_DIR/${CD_INTO_DIR//$CDD_CWD_DIR/}"
      local TOP_DIR="$(__git_top_dir "$PWD")"
      [[ -n "$OLDPATH" ]] || OLDPATH="$PATH"
      [[ -f "$TOP_DIR/.env" ]] && . "$TOP_DIR/.env"
      [[ -d "$TOP_DIR/bin" ]] && PATH="$TOP_DIR/bin:${OLDPATH:$PATH}"
      [[ -d "$TOP_DIR/node_modules/.bin" ]] && PATH="$TOP_DIR/node_modules/.bin:${OLDPATH:$PATH}" || PATH="$OLDPATH"
      if [[ -d "$TOP_DIR/.git" && -z "$REPO_UPDATED" ]]; then
        { printf_green "Updating Repo" && git -C "$CD_INTO_DIR" pull -q; } &&
          REPO_UPDATED="yes"
      fi
      if [[ $# == 0 ]] || [[ "$CD_INTO_DIR" = "/" ]]; then
        builtin cd "$CDD_CWD_DIR" &>/dev/null || printf_return "cd into $CDD_CWD_DIR failed"
      else
        builtin cd "$CD_INTO_CUR" &>/dev/null || printf_return "cd into $CD_INTO_CUR failed"
      fi
      export -f cd
    fi
    exitCode=$?
    return $exitCode
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  cd_goto() {
    local dir folder message message_add name exitCode
    [[ "$CDD_STATUS" = "running" ]] && [[ "$1" = ./* ]] && cd "$1" && return
    [[ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]] || __gen_config "$@"
    if [[ -n "$CDD_STATUS" ]]; then
      printf_pause "cdd already appears to be active "
      return 1
    fi
    if [[ "$CDD_STATUS" != "running" ]] && { [[ "$1" = "current_project" ]] || [[ "$1" = "." ]]; }; then
      dir="$PWD"
      folder="$(basename $(dirname $PWD/.))"
      message="Entering the $dir with alias $alias"
    elif [[ -n "$(list_aliases "folder" "$1")" ]]; then
      dir="$(list_aliases "folder" "$1")"
      folder="$(list_aliases alias "$1")"
      message="entering into $dir"
    elif [[ -z "$dir" ]]; then
      name="${1:-$CDD_OPTIONS_DEFAULT_PROJECT_NAME}"
      dir="$CDD_OPTIONS_PROJECT_DIR/$name"
      folder="$(basename "$dir/")"
      message="Entering $name"
      message_add="see $PROG -l or $PROG -a name directory"
    fi
    local exitCode=0
    local STATUS="running"
    local SHELL="${SHELL:-bash}"
    local PS1_ADD_CDD="$PS1_ADD cdd: ${folder:-$dir}"
    clear
    printf '\n'
    [[ -d "$dir" ]] || mkdir -p "$dir"
    [[ -d "$dir" ]] && builtin cd "$dir" || printf_exit "Failed to enter $dir"
    [[ -n "$message" ]] && printf_green "$message using $(basename "$SHELL" 2>/dev/null)"
    [[ -n "$message_add" ]] && printf_blue "$message_add"
    printf_cyan "Type quit to return to your previous directory/shell"
    printf_red "cd out of $dir is not recommended while using cdd"
    export -f quit _cd cd_cdd __git_top_dir
    export CDD_CWD_DIR="$PWD" PS1_ADD="$PS1_ADD_CDD" CDD_STATUS="$STATUS"
    $SHELL -l
    exitCode=$?
    sleep .5
    clear
    return ${exitCode:-$?}
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  add_alias() {
    [[ $# = 2 ]] || printf_exit "Usage: $PROG add name Directory"
    if ! list_aliases alias "$1" | grep -qx "$1"; then
      printf_green "Adding the alias $1 to config"
      grep -v '^$' "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp"
      printf "%s\n\n" ''$1' = "'$2'"' >>"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp"
      mv -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp" "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
    else
      printf_red "It appears that $1 has already been added"
    fi
    __list_array "$CDD_OPTIONS_DIR" "$ARRAY"
    return $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  rm_alias() {
    local folder
    [[ $# = 1 ]] || printf_exit "Usage: $PROG add delete"
    folder="$(list_aliases alias "$1")"
    if list_aliases alias '*' | grep -qx "$folder"; then
      printf_green "Removing the alias $folder from config"
      grep -sxv ^"$folder = .*" "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp" &&
        mv -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp" "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" || return 1
      __list_array "$CDD_OPTIONS_DIR" "$ARRAY"
    else
      printf_red "The alias $1 doesn't exist"
    fi
    return $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  list_aliases() {
    if [[ ! -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]]; then __gen_config &>/dev/null; fi
    __grep() { grep -sE ^''$1' =*..*'$ "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" | sed 's|"||g' 2>/dev/null; }
    if [[ "$1" = "folder" ]]; then
      shift 1
      __grep "$1" | awk -F'= ' '{print $2}' | sed -e 's#" ##g' 2>/dev/null | grep -Ev '^$|^#' | grep '^'
    elif [[ "$1" = "alias" ]]; then
      shift 1
      __grep "$1" | awk -F' =' '{print $1}' | sed -e 's#"##g' 2>/dev/null | grep -Ev '^$|^#' | grep '^'
    else
      __grep "$1" | awk -F' =' '{print $1,$2}' | sed -e 's#"##g' 2>/dev/null | grep -Ev '^$|^#' | grep '^'
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  delete() {
    if [[ -n "$CDD_CWD_DIR" ]] && [[ "$CDD_STATUS" = "running" ]]; then
      FILES_TO_DELETE="$(find "$CDD_CWD_DIR/" -maxdepth 1 2>/dev/null | grep -v "^$CDD_CWD_DIR/$")"
      if [[ -n "$FILES_TO_DELETE" ]]; then
        printf_blue "Deleting all files in $CDD_CWD_DIR"
        for file in ${FILES_TO_DELETE}; do
          if [[ -d "$file" ]]; then
            printf_yellow "Deleting folder: $file" && rm -Rf "${file}" &>/dev/null
          elif [[ -f "$file" ]]; then
            printf_yellow "Deleting file: $file" && rm -Rf "${file}" &>/dev/null
          elif [[ -e "$file" ]]; then
            printf_yellow "Deleting: $file" && rm -Rf "${file}" &>/dev/null
          fi
        done
        exitCode=0
      else
        printf_red "There are no files to delete"
        exitCode=1
      fi
    else
      printf_red "cdd is not active refusing to delete files"
      exitCode=1
    fi
    return ${exitCode:-$?}
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Defaults
  local exitCode=""
  local CDD_GREP_COLORS="$GREP_COLORS;mt=38;5;220;1"
  local CDD_CONFIG_FILE="settings.conf"
  local CDD_ALIAS_FILE="aliases.conf"
  local CDD_CONFIG_DIR="$HOME/.config/misc/settings/cdd"
  local CDD_CONFIG_BACKUP_DIR="$HOME/.local/share/misc/cdd/backups"
  local CDD_OPTIONS_DIR="$HOME/.local/share/misc/cdd/options"
  local CDD_OPTIONS_TMP_DIR="${TMPDIR:-/tmp}/testing"
  local CDD_OPTIONS_DEFAULT_PROJECT_NAME=${CDD_OPTIONS_DEFAULT_PROJECT_NAME:-default}
  local CDD_OPTIONS_PROJECT_DIR="${CDD_OPTIONS_PROJECT_DIR:-$HOME/.local/share/cdd/projects}"
  local CDD_OPTIONS_TMP_DIR="${CDD_OPTIONS_TMP_DIR:-$HOME/.local/tmp/cdd}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Argument/Option settings
  local SETARGS="${*}"
  local SHORTOPTS="c,v,h,m::,r:,l,s:,a::,d"
  local LONGOPTS="options,config,version,help,modify::,remove,list,shell:,add::,delete"
  local ARRAY="$(list_aliases '*' | awk '{print $1}')"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Generate Files
  [[ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ]] || __gen_config &>/dev/null
  [[ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]] || __gen_alias &>/dev/null
  [[ -f "$CDD_OPTIONS_DIR/options" ]] || __list_options "$CDD_OPTIONS_DIR" &>/dev/null
  [[ -f "$CDD_OPTIONS_DIR/array" ]] || __list_array "$CDD_OPTIONS_DIR" "$ARRAY" &>/dev/null
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Import config
  [[ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ]] && . "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Check for required applications
  cmd_exists --error bash || exit 1
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # options
  local setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$(basename "$0" 2>/dev/null)" -- "$@" 2>/dev/null)
  eval set -- "${setopts[@]}" 2>/dev/null
  while :; do
    case $1 in
    --options)
      __list_array "$CDD_OPTIONS_DIR" "$ARRAY"
      __list_options "$CDD_OPTIONS_DIR"
      exit $?
      ;;
    -v | --version)
      __version
      exit $?
      ;;
    -h | --help)
      __help
      exit $?
      ;;
    -c | --config)
      __gen_config
      __gen_alias
      exit $?
      ;;
    -a | --add)
      shift 2
      add_alias "$2" "$3"
      exit $?
      ;;
    -m | --modify)
      shift 2
      [[ -z "$2" ]] && [[ -z "$3" ]] && [[ -n "$EDITOR" ]] && $EDITOR "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
      add_alias "$2" "$3"
      exit $?
      ;;
    -r | --remove)
      rm_alias "$2"
      shift 1
      exit $?
      ;;
    -l | --list)
      shift 1
      list_aliases alias '*'
      exit $?
      ;;
    -s | --shell)
      if [[ -f "$2" ]] || cmd_exists "$2"; then
        SHELL="$2"
      else
        printf_exit "$2 seems to be an invalid shell"
      fi
      shift 1
      ;;
    -d | --delete)
      shift 1
      delete || false
      exit $?
      ;;
    --)
      shift
      break
      ;;
    esac
    shift
  done
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # remove invalid options
  set -- "$SETARGS"
  while getopts ":*" opt; do
    case $opt in
    *) shift ;;
    esac
  done
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # begin main app
  export GREP_COLORS="$CDD_GREP_COLORS"
  cd_goto "$1"

  # lets exit with code
  return "${exitCode:-$?}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
cdd_main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
