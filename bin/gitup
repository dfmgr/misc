#!/usr/bin/env bash
gitup() {
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  PROG="$(basename "$0")"
  VERSION="202103190426-git"
  USER="${SUDO_USER:-${USER}}"
  HOME="${USER_HOME:-${HOME}}"
  SRC_DIR="${BASH_SOURCE%/*}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  #set opts

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ##@Version       : 202103200809-git
  # @Author        : Jason Hempstead
  # @Contact       : jason@casjaysdev.com
  # @License       : WTFPL
  # @ReadME        : gitup --help
  # @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
  # @Created       : Saturday, Mar 20, 2021 08:09 EDT
  # @File          : gitup
  # @Description   : automagically add commit and push current git repo
  # @TODO          :
  # @Other         :
  # @Resource      :
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Main function file
  if [ -f "$SRC_DIR/functions.bash" ]; then
    FUNCTIONS_DIR="$SRC_DIR"
    . "$FUNCTIONS_DIR/functions.bash"
  elif [ -f "$HOME/.local/bin/functions.bash" ]; then
    FUNCTIONS_DIR="$HOME/.local/bin"
    . "$FUNCTIONS_DIR/functions.bash"
  else
    printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $FUNCTIONS_DIR"
    return 1
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # helper function
  __help() {
    app_help "Usage: gitup  -  gitup --version" \
      "-d, --dir              -  set working dir" \
      "-c, --config           -  create config file" \
      "-v, --version          -  display version" \
      "-h, --help             -  display help"
    exit
  }
  __version() { app_version; }
  __gen_config() {
    printf_green "Generating the config file in"
    printf_green "$CONFDIR/$CONFFILE"
    [ -d "$CONFDIR" ] || mkdir -p "$CONFDIR"
    [ -f "$CONFDIR/$CONFFILE" ] && cp -Rf "$CONFDIR/$CONFFILE" "$CONFDIR/$CONFFILE.$$"
    cat <<EOF >"$CONFDIR/$CONFFILE"
# Settings for gitup

EOF
    if [ -f "$CONFDIR/$CONFFILE" ]; then
      printf_green "Your config file for gitup has been created"
    else printf_red "Failed to create the config file"; fi
    exit $?
  }
  __run_git_pull() { git -C "${1:-$gitdir}" pull -q || printf_exit "Failed to pull from $repo"; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Main function
  local SETARGS="$*"
  local SHORTOPTS="a,c,v,h,d:,f:"
  local LONGOPTS="all,config,version,help,dir:,file:"
  __list_options() { echo -n "-$SHORTOPTS " | sed 's#:##g;s#,# -#g' && echo "--$LONGOPTS " | sed 's#:##g;s#,# --#g' && exit; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  local CONFFILE="settings.conf"
  local CONFDIR="$HOME/.config/misc/settings/gitup"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  local gitdir="${1:-$PWD}"
  local repo="$MYCURRDIR"
  local gitdir="$(__git_top_dir "$MYCURRDIR")"
  local oldpwd="$PWD"
  local gitversion="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ -f "$CONFDIR/$CONFFILE" ] && . "$CONFDIR/$CONFFILE"
  [ -d "$1" ] && MYCURRDIR="$1" && shift
  [ -d "$2" ] && MYCURRDIR="$2" && shift || MYCURRDIR="$(__git_top_dir "$MYCURRDIR")"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # options
  local setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "gitup" -- "$@" 2>/dev/null)
  eval set -- "$setopts" 2>/dev/null
  while :; do
    case $1 in
    -a | --all) __list_options ;;
    -v | --version) __version ;;
    -h | --help) __help ;;
    -c | --config) __gen_config ;;
    -d | --dir)
      MYCURRDIR="$2"
      shift 1
      ;;
    -f | --file)
      MYCURRFILE="$2"
      shift 1
      ;;
    --)
      shift 1
      break
      ;;
      #*) break ;;
    esac
    shift
  done
  set -- "$SETARGS"
  [ -d "$MYCURRDIR" ] || printf_mkdir "$MYCURRDIR"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Required app check
  cmd_exists --error bash || exit 1
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # begin main app
  if [ -d "$gitdir/.git" ]; then
    printf_warning "Commiting Changes and pushing to the repo"
    date +"$gitversion" >"$gitdir/version.txt" &&
      [ -f "$gitdir/gitmasterconfig" ] && [ -d "$gitdir/.git" ] &&
      __cp_rf "$gitdir/gitmasterconfig" "$gitdir/.git/config"
    __devnull git -C "$gitdir" add . &&
      [ -n "$1" ] &&
      git -C "$gitdir" commit -q -S "$1" "$2" ||
      git -C "$gitdir" commit -q -S -m " ü¶àüè†üêú‚ùó Fixes and Updates ‚ùóüêúü¶àüè† " &&
      __run_git_pull "$gitdir" &&
      __devnull git -C "$gitdir" push -q || __devnull git -C "$gitdir" push -q || false
    __getexitcode $? "Successfully pushed to: $repo" "Failed to push to: $repo"
  else
    printf_exit "This does not seem to be a git repo"
    exit 1
  fi

  # lets exit with code
  return "${exitCode:-0}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
gitup "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit $?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
