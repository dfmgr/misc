#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="$(basename "$0")"
VERSION="202103231633-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103231633-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : dmenu_edit_conf --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Tuesday, Mar 23, 2021 16:33 EDT
# @File          : dmenu_edit_conf
# @Description   : dmenu for editing configuration files
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main function file
if [ -f "$SRC_DIR/functions.bash" ]; then
  FUNCTIONS_DIR="$SRC_DIR"
  . "$FUNCTIONS_DIR/functions.bash"
elif [ -f "$HOME/.local/bin/functions.bash" ]; then
  FUNCTIONS_DIR="$HOME/.local/bin"
  . "$FUNCTIONS_DIR/functions.bash"
else
  printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $FUNCTIONS_DIR"
  return 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# helper functions - See github.com/dfmgr/misc/bin/functions.bash
__version() { app_version; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__help() {
  app_help "4" "Usage: dmenu_edit_conf " \
    "-c, --config           -  create config file" \
    "-v, --version          -  display version" \
    "-h, --help             -  display help" \
    "--options              -  used by completions"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE"
  [ -d "$DMENU_EDIT_CONF_CONFIG_DIR" ] || mkdir -p "$DMENU_EDIT_CONF_CONFIG_DIR"
  [ -d "$DMENU_EDIT_CONFIG_BACKUP_DIR" ] || mkdir -p "$DMENU_EDIT_CONFIG_BACKUP_DIR"
  [ -f "$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE" ] &&
    cp -Rf "$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE" "$DMENU_EDIT_CONFIG_BACKUP_DIR/$DMENU_EDIT_CONF_CONFIG_FILE.$$"
  cat <<EOF >"$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE"
# Settings for dmenu_edit_conf
DMENU_EDIT_EDITOR="${DMENU_EDIT_EDITOR}"
DMENU_EDIT_USER_CONF_DIR="${DMENU_EDIT_USER_CONF_DIR:-$DMENU_EDIT_CONF_CONFIG_DIR/menus}"

EOF
  if [ -f "$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE" ]; then
    printf_green "Your config file for dmenu_edit_conf has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
__gen_files() {
  for f in ~/.config/myscripts/*/settings.conf ~/.config/misc/settings/*/settings.conf; do
    name="$(basename "$(dirname "$f")")"
    link="$f"
    if [ ! -f "$DMENU_EDIT_USER_CONF_DIR/$name" ]; then
      echo 'editConfig="'$link'"' >"$DMENU_EDIT_USER_CONF_DIR/$name"
    #printf_green "Created $name to $link"
    #printf_green "in: $DMENU_EDIT_USER_CONF_DIR/$name"
    fi
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
DMENU_EDIT_CONF_CONFIG_FILE="settings.conf"
DMENU_EDIT_CONF_CONFIG_DIR="$HOME/.config/misc/settings/dmenu_edit_conf"
DMENU_EDIT_CONFIG_BACKUP_DIR="$HOME/.local/share/misc/dmenu_edit_conf/backups"
DMENU_EDIT_CONF_OPTIONS_DIR="$HOME/.local/share/misc/dmenu_edit_conf/options"
DMENU_EDIT_USER_CONF_DIR="${DMENU_EDIT_USER_CONF_DIR:-$DMENU_EDIT_CONF_CONFIG_DIR/menus}"
DMENU_EDIT_EDITOR="${DMENU_EDIT_EDITOR:-$EDITOR}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
declare editConfig SETARGS SHORTOPTS LONGOPTS
editConfig=""
SETARGS="${*}"
SHORTOPTS="c,v,h"
LONGOPTS="options,config,version,help"
ARRAY="$(find -L "$DMENU_EDIT_USER_CONF_DIR/" -maxdepth 3 -type f 2>/dev/null)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$DMENU_EDIT_CONF_OPTIONS_DIR/options" ] || __list_options "$DMENU_EDIT_CONF_OPTIONS_DIR" &>/dev/null
[ -f "$DMENU_EDIT_CONF_OPTIONS_DIR/array" ] || __list_array "$DMENU_EDIT_CONF_OPTIONS_DIR" "$ARRAY" &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE" ] && . "$DMENU_EDIT_CONF_CONFIG_DIR/$DMENU_EDIT_CONF_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$PROG" -- "$@" 2>/dev/null)
eval set -- "$setopts" 2>/dev/null
while :; do
  case $1 in
  --options)
    __list_options "$DMENU_EDIT_CONF_OPTIONS_DIR"
    __list_array "$DMENU_EDIT_CONF_OPTIONS_DIR" "$ARRAY"
    exit $?
    ;;
  -v | --version)
    __version
    exit $?
    ;;
  -h | --help)
    __help
    exit $?
    ;;
  -c | --config)
    __gen_config
    __gen_files
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
    #*) break ;;
  esac
  shift
done
set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications
cmd_exists --error bash || exit 1
[ "$(uname)" = Linux ] || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
if cmd_exists rofi; then
  __dmenu() { rofi -theme ${ROFI_THEME:-purple} -show -dmenu -i -p 'Edit config file: ' || return 1; }
elif cmd_exists dmenu; then
  __dmenu() { dmenu -i -p 'Edit config file: '; }
else
  notifications "$PROG" "This requires either dmenu or rofi"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -d "$DMENU_EDIT_USER_CONF_DIR" ]; then
  GET_CONFIGS="$(cd "$DMENU_EDIT_USER_CONF_DIR" && find -- * -maxdepth 3 -type f)"
  EDIT_NAME="$(echo "$GET_CONFIGS" | __dmenu)"
  if [ -n "$EDIT_NAME" ]; then
    . "$DMENU_EDIT_USER_CONF_DIR/$EDIT_NAME"
  else
    notifications "$PROG" "No file selected"
  fi
fi
#printf_exit "E:$EDIT_NAME e:$editConfig"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [[ -e "$editConfig" ]] || [[ -n "$(builtin type "$editConfig")" ]]; then
  notifications "$PROG" "Opening $editConfig"
  myeditor "$editConfig"
else
  notifications "$PROG" "$editConfig does not exist"
  eval $PROG "$*" || exit
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit "${exitCode:-$?}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
