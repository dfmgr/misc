#!/usr/bin/env bash
ex_main() {
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  PROG="$(basename "$0")"
  VERSION="202103231633-git"
  USER="${SUDO_USER:-${USER}}"
  HOME="${USER_HOME:-${HOME}}"
  SRC_DIR="${BASH_SOURCE%/*}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  #set opts

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ##@Version       : 202103231633-git
  # @Author        : Jason Hempstead
  # @Contact       : jason@casjaysdev.com
  # @License       : WTFPL
  # @ReadME        : ex --help
  # @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
  # @Created       : Tuesday, Mar 23, 2021 16:33 EDT
  # @File          : ex
  # @Description   :
  # @TODO          :
  # @Other         :
  # @Resource      :
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Main function file
  if [ -f "$SRC_DIR/functions.bash" ]; then
    FUNCTIONS_DIR="$SRC_DIR"
    . "$FUNCTIONS_DIR/functions.bash"
  elif [ -f "$HOME/.local/bin/functions.bash" ]; then
    FUNCTIONS_DIR="$HOME/.local/bin"
    . "$FUNCTIONS_DIR/functions.bash"
  else
    printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $FUNCTIONS_DIR"
    return 1
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # helper functions - See github.com/dfmgr/misc/bin/functions.bash
  __version() { app_version; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __help() {
    app_help "4" "Usage: ex file" \
      "-f, --file             -  specify file" \
      "-c, --config           -  create config file" \
      "-v, --version          -  display version" \
      "-h, --help             -  display help" \
      "--options              -  used by completions"
    exit $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __gen_config() {
    printf_green "Generating the config file in"
    printf_green "$EX_CONFIG_DIR/$EX_CONFIG_FILE"
    [ -d "$EX_CONFIG_DIR" ] || mkdir -p "$EX_CONFIG_DIR"
    [ -d "$EX_CONFIG_BACKUP_DIR" ] || mkdir -p "$EX_CONFIG_BACKUP_DIR"
    [ -f "$EX_CONFIG_DIR/$EX_CONFIG_FILE" ] &&
      cp -Rf "$EX_CONFIG_DIR/$EX_CONFIG_FILE" "$EX_CONFIG_BACKUP_DIR/$EX_CONFIG_FILE.$$"
    cat <<EOF >"$EX_CONFIG_DIR/$EX_CONFIG_FILE"
# Settings for ex

EOF
    if [ -f "$EX_CONFIG_DIR/$EX_CONFIG_FILE" ]; then
      printf_green "Your config file for ex has been created"
      true
    else
      printf_red "Failed to create the config file"
      false
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Defaults
  local exitCode=""
  local EX_CONFIG_FILE="settings.conf"
  local EX_CONFIG_DIR="$HOME/.config/misc/settings/ex"
  local EX_CONFIG_BACKUP_DIR="$HOME/.local/share/misc/ex/backups"
  local EX_OPTIONS_DIR="$HOME/.local/share/misc/ex/options"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Argument/Option settings
  local SETARGS="${*}"
  local SHORTOPTS="c,v,h,f:"
  local LONGOPTS="options,config,version,help,file:"
  local ARRAY=""
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Generate Files
  [ -f "$EX_CONFIG_DIR/$EX_CONFIG_FILE" ] || __gen_config &>/dev/null
  [ -f "$EX_OPTIONS_DIR/options" ] || __list_options "$EX_OPTIONS_DIR" &>/dev/null
  [ -f "$EX_OPTIONS_DIR/array" ] || __list_array "$EX_OPTIONS_DIR" "$ARRAY" &>/dev/null
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Import config
  [ -f "$EX_CONFIG_DIR/$EX_CONFIG_FILE" ] && . "$EX_CONFIG_DIR/$EX_CONFIG_FILE"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # options
  local setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$PROG" -- "$@" 2>/dev/null)
  eval set -- "$setopts" 2>/dev/null
  while :; do
    case $1 in
    --options)
      __list_options "$EX_OPTIONS_DIR"
      __list_array "$EX_OPTIONS_DIR" "$ARRAY"
      exit $?
      ;;
    -v | --version)
      __version
      exit $?
      ;;
    -h | --help)
      __help
      exit $?
      ;;
    -c | --config)
      __gen_config
      exit $?
      ;;
    -f | --file)
      shift 1
      file="$1"
      ;;
    --)
      shift 1
      break
      ;;
      #*) break ;;
    esac
    shift
  done
  set -- "$SETARGS"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Check for required applications
  cmd_exists --error bash || exit 1
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # begin main app
  filename="${file:-$1}"
  if [ -f "$filename" ]; then
    case "$filename" in
    *.tar.bz2)
      cmd_exists tar || printf_exit "Please install tar"
      printf_blue "Attempting to extract $filename using tar"
      if tar xjf "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.tar.gz)
      cmd_exists tar || printf_exit "Please install tar"
      printf_blue "Attempting to extract $filename using tar"
      if tar xzf "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.bz2)
      cmd_exists bunzip2 || printf_exit "Please install bunzip2"
      printf_blue "Attempting to extract $filename using bunzip2"
      if bunzip2 "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.rar)
      cmd_exists unrar || printf_exit "Please install unrar"
      printf_blue "Attempting to extract $filename using unrar"
      if unrar x "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.gz)
      cmd_exists gunzip || printf_exit "Please install gunzip"
      printf_blue "Attempting to extract $filename using gunzip"
      if gunzip "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.tar)
      cmd_exists tar || printf_exit "Please install tar"
      printf_blue "Attempting to extract $filename using tar"
      if tar xf "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.tbz2)
      cmd_exists tar || printf_exit "Please install tar"
      printf_blue "Attempting to extract $filename using tar"
      if tar xjf "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.tgz)
      cmd_exists tar || printf_exit "Please install tar"
      printf_blue "Attempting to extract $filename using tar"
      if tar xzf "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.zip)
      cmd_exists unzip || printf_exit "Please install unzip"
      printf_blue "Attempting to extract $filename using unzip"
      if unzip "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.Z)
      cmd_exists uncompress || printf_exit "Please install uncompress"
      printf_blue "Attempting to extract $filename using uncompress"
      if uncompress "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.7z)
      cmd_exists 7z || printf_exit "Please install 7z"
      printf_blue "Attempting to extract $filename using 7z"
      if 7z x "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *.xz)
      cmd_exists unxz || printf_exit "Please install unxz"
      printf_blue "Attempting to extract $filename using unxz"
      if unxz "$filename" &>/dev/null; then
        exitCode=0
      else
        exitCode=1
      fi
      ;;

    *)
      printf_red "$filename cannot be extracted "
      exitCode=1
      ;;
    esac
  else
    printf_red "$filename is not a valid file"
    exitCode=1
  fi
  if [[ "$exitCode" = 0 ]]; then
    printf_green "File has been extracted"
  else
    printf_red "Failed to extract file"
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # lets exit with code
  return "${exitCode:-$?}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
ex_main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
