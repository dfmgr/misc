#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# default path
PATH="$HOME/.local/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/bin:/sbin:/usr/games"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set default prompt
PS1='\h:\w\$ '
export PS1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export NODE_MANAGER="fnm"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# History
HISTSIZE=32768
HISTFILESIZE="${HISTSIZE}"
SAVEHIST=4096
HISTCONTROL=ignoredups:erasedups
BASH_COMPLETION_USER_DIR="$HOME/.local/share/bash-completion/completions"
export HISTSIZE HISTFILESIZE SAVEHIST HISTCONTROL BASH_COMPLETION_USER_DIR
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# sh specific
if [ -n "$SH_VERSION" ]; then
  SHELL="$(command -v sh)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# bash specific
elif [ -n "$BASH_VERSION" ]; then
  SHELL="$(command -v bash)"
  BASH_SILENCE_DEPRECATION_WARNING="1"
  HISTFILE="$HOME/.config/bash/bash_history"
  if [ -f "$(command -v direnv 2>/dev/null)" ]; then
    direnv hook bash >/dev/null 2>&1
  fi
  if [ -f "$HOME/.bash_history" ]; then
    mv -f "$HOME/.bash_history" "$HISTFILE"
    history -r
  fi
  export BASH_SILENCE_DEPRECATION_WARNING HISTFILE
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# zsh specific
elif [ -n "$ZSH_VERSION" ]; then
  SHELL="$(command -v zsh)"
  ZDOTDIR="$HOME/.config/zsh"
  ZSH_CACHEDIR="$HOME/.cache/oh-my-zsh"
  ZSH="$HOME/.local/share/zsh/oh-my-zsh"
  ZSH_CUSTOM="$HOME/.local/share/zsh/oh-my-zsh/custom"
  ZSH_DISABLE_COMPFIX="${ZSH_DISABLE_COMPFIX:-true}"
  HISTFILE="$HOME/.config/zsh/zsh_history"
  if [ -f "$(command -v direnv 2>/dev/null)" ]; then
    direnv hook zsh >/dev/null 2>&1
  fi
  export ZDOTDIR ZSH_CACHEDIR ZSH ZSH_CUSTOM ZSH_DISABLE_COMPFIX HISTFILE
fi
export SHELL
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set umask
#umask 022
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setting the temp directory
export TMP="${TMP:-$HOME/.local/tmp}"
export TEMP="${TEMP:-$HOME/.local/tmp}"
export TMPDIR="${TMPDIR:-$HOME/.local/tmp}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set locale
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export LC_ALL="$LC_ALL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure display
if [ -n "$DISPLAY" ]; then
  if [ -n "$DISPLAY_LOW_DENSITY" ] && grep -siq chromium /proc/version; then
    DISPLAY_LOW_DENSITY="$DISPLAY"
  fi
  if [ -f "$(command -v xrandr 2>/dev/null)" ]; then
    RESOLUTION="$(xrandr --current 2>/dev/null | grep '*' | uniq | awk '{print $1}')"
  fi
fi
export DISPLAY RESOLUTION
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# disable blank screen
if [ -n "$DISPLAY" ] && [ -f "$(command -v xset 2>/dev/null)" ]; then
  xset s off &>/dev/null
  xset -dpms &>/dev/null
  xset s off -dpms &>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enviroment variables when using a desktop
# if [ -z "$SSH_CONNECTION" ] && [ -n "$DISPLAY" ] && [ -f "$(command -v dbus-update-activation-environment 2>/dev/null)" ]; then
#   dbus-update-activation-environment --systemd DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY 2>/dev/null
#   export DBUS_SESSION_BUS_ADDRESS XDG_RUNTIME_DIR
# fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enable control alt backspace
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  XKBOPTIONS="terminate:ctrl_alt_bksp"
  if [ -f "$(command -v setxkbmap 2>/dev/null)" ]; then
    setxkbmap -model pc104 -layout us -option "terminate:ctrl_alt_bksp" 2>/dev/null
  fi
  export XKBOPTIONS
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup modifiers
if [ -n "$DISPLAY" ] && [ -n "$DESKTOP_SESSION" ]; then
  if [ -f "$(command -v ibus 2>/dev/null)" ]; then
    XMODIFIERS=@im=ibus
    GTK_IM_MODULE=ibus
    QT_IM_MODULE=ibus
  elif [ -f "$(command -v fcitx 2>/dev/null)" ]; then
    XMODIFIERS=@im=fcitx
    GTK_IM_MODULE=fcitx
    QT_IM_MODULE=fcitx
  fi
  export XMODIFIERS GTK_IM_MODULE QT_IM_MODULE
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# xserver settings
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  if [ ! -f "$HOME/.Xdefaults" ]; then
    touch "$HOME/.Xdefaults"
  fi
  if [ -f "$(command -v xrdb 2>/dev/null)" ]; then
    xrdb -merge "$HOME/.Xdefaults" 2>/dev/null
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# XDG Settings
LOGS_DIRECTORY="${LOGDIR:-$HOME/.local/log}"
STATE_DIRECTORY="$HOME/.local/lib"
CACHE_DIRECTORY="$HOME/.cache"
RUNTIME_DIRECTORY="${XDG_RUNTIME_DIR:-/run/user/$UID}"
CONFIGURATION_DIRECTORY="${CONFIGURATION_DIRECTORY:-$HOME/.config}"
XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$RUNTIME_DIRECTORY}"
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$CONFIGURATION_DIRECTORY}"
export LOGS_DIRECTORY STATE_DIRECTORY CACHE_DIRECTORY RUNTIME_DIRECTORY
export CONFIGURATION_DIRECTORY XDG_RUNTIME_DIR XDG_CONFIG_HOME
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ensure .gitconfig exists
if [ -f ~/.config/local/gitconfig.local ] && [ ! -f ~/.gitconfig ]; then
  cp -f "$HOME/.config/local/gitconfig.local" "$HOME/.gitconfig"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sudo prompt
if command ask_for_password &>/dev/null; then
  SUDO_PROMPT=""
  SUDO_ASKPASS='/usr/local/bin/ask_for_password'
else
  SUDO_PROMPT="$(printf "\t\t\033[1;31m")[sudo]$(printf "\033[1;36m") password for $(printf "\033[1;32m")%p: $(printf "\033[0m")"
fi
export SUDO_PROMPT SUDO_ASKPASS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export gpg tty
GPG_TTY="$(tty)"
SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
if [ -f "$(command -v gpg-agent 2>/dev/null)" ]; then
  gpg-agent --enable-ssh-support --daemon -q &>/dev/null
fi
export GPG_TTY SSH_AUTH_SOCK
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export ssh
if [ -d "$HOME/.ssh" ]; then
  for f in $(find "$HOME/.ssh"/id_* 2>/dev/null | grep -v '/*.pub'); do
    ssh-add -q "$f" &>/dev/null
  done
fi
if [ ! -S "$HOME/.ssh/ssh_auth_sock" ]; then
  if [ -f "$(command -v ssh-agent 2>/dev/null)" ]; then
    ssh-agent &>/dev/null
  fi
  if [ -n "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" "$HOME/.ssh/ssh_auth_sock" &>/dev/null
  fi
fi
[ -d "$HOME/.ssh/known_hosts.d" ] || mkdir -p "$HOME/.ssh/known_hosts.d"
export SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-$HOME/.ssh/ssh_auth_sock}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use custom `less` colors for `man` pages.
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Don't clear the screen after quitting a `man` page.
export MANPAGER="less -X"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add emacs to bin
if [ -d "$HOME/.emacs.d/bin" ]; then
  PATH="$HOME/.emacs.d/bin:$PATH"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# rpm devel
export QA_RPATHS="$((0x0001 | 0x0010))"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mpd server
MPDSERVER="$(hostname -s 2>/dev/null)"
export MPDSERVER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set hostname
HOSTNAME="$(hostname -f 2>/dev/null)"
export HOSTNAME
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# notes settings
NOTES_SERVER_NAME="development"
NOTES_DIRECTORY="$HOME/.local/share/editors/notes"
export NOTES_SERVER_NAME NOTES_DIRECTORY
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create a banner
if [ -f "$(command -v figlet 2>/dev/null)" ]; then
  BANNER="figlet -f banner"
elif [ -f "$(command -v toilet 2>/dev/null)" ]; then
  BANNER="toilet -f mono9.tlf"
elif [ -f "$(command -v banner 2>/dev/null)" ]; then
  BANNER="banner"
else
  BANNER="echo -e"
fi
export BANNER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure GO
GOPATH="$HOME/.local/share/go"
GODIR="$GOPATH"
GOBIN="$GOPATH/bin"
GOCACHE="$HOME/.cache/go-build"
export GOPATH GODIR GOBIN GOCACHE
[ -d "$GOBIN" ] && PATH="$GOBIN:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup ruby
if [ -d "HOME/.local/share/gem" ]; then
  GEM_HOME="$HOME/.local/share/gem"
  GEM_PATH="$HOME/.local/share/gem"
  PATH="$GEM_HOME/bin:$PATH"
  export GEM_HOME GEM_PATH
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ruby Version Manager
if [ -f "$HOME/.local/share/scripts/rvm" ]; then
  rvm_path="$HOME/.local/share/rvm"
  [ -f "$rvm_path/rvm" ] && . "$rvm_path/scripts/rvm"
  [ -d "$rvm_path/bin" ] && PATH="$rvm_path/bin:$PATH"
  export rvm_path
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Fast Node Manager
FNM_DIR="$HOME/.local/share/nodejs/fnm"
FNM_MULTISHELL_PATH="$FNM_DIR/multishell"
PATH="$FNM_MULTISHELL_PATH/bin:$PATH"
export FNM_DIR FNM_MULTISHELL_PATH PATH
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# node version manager
NVM_DIR="$HOME/.local/share/nodejs/nvm"
NVM_BIN="$HOME/.local/bin"
NO_UPDATE_NOTIFIER="true"
NODE_REPL_HISTORY_SIZE=2000
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
export NVM_DIR NVM_BIN NO_UPDATE_NOTIFIER NODE_REPL_HISTORY_SIZE
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup setV
SETV_VIRTUAL_DIR_PATH="$HOME/.local/share/venv/"
export SETV_VIRTUAL_DIR_PATH
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Add Rust/Cargo to the path
CARGO_HOME="$HOME/.local/share/carge"
PATH="$CARGO_HOME/bin:$PATH"
[ -f "$CARGO_HOME/env" ] && . "$CARGO_HOME/env"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use hub as git if installed
if [ -f "$(command -v hub 2>/dev/null)" ]; then
  eval "$(hub alias -s >/dev/null 2>&1)"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export browser
if [ -z "$DISPLAY" ]; then
  if [ -f "$(command -v lynx 2>/dev/null)" ]; then
    MYBROWSER="$(command -v lynx 2>/dev/null)"
  elif [ -f "$(command -v links 2>/dev/null)" ]; then
    MYBROWSER="$(command -v links 2>/dev/null)"
  fi
else
  if [ -f "$(command -v garcon-url-handler 2>/dev/null)" ]; then
    MYBROWSER="$(command -v garcon-url-handler 2>/dev/null) --url"
  elif [ -f "$(command -v firefox 2>/dev/null)" ]; then
    MYBROWSER="$(command -v firefox 2>/dev/null)"
  elif [ -f "$(command -v chromium 2>/dev/null)" ]; then
    MYBROWSER="$(command -v chromium 2>/dev/null)"
  elif [ -f "$(command -v google-chrome 2>/dev/null)" ]; then
    MYBROWSER="$(command -v google-chrome 2>/dev/null)"
  elif [ -f "$(command -v opera 2>/dev/null)" ]; then
    MYBROWSER="$(command -v opera 2>/dev/null)"
  elif [ -f "$(command -v epiphany-browser 2>/dev/null)" ]; then
    MYBROWSER="$(command -v epiphany-browser 2>/dev/null)"
  elif [ -f "$(command -v falkon 2>/dev/null)" ]; then
    MYBROWSER="$(command -v falkon 2>/dev/null)"
  elif [ -f "$(command -v midori 2>/dev/null)" ]; then
    MYBROWSER="$(command -v midori 2>/dev/null)"
  elif [ -f "$(command -v netsurf 2>/dev/null)" ]; then
    MYBROWSER="$(command -v netsurf 2>/dev/null)"
  elif [ -f "$(command -v surf 2>/dev/null)" ]; then
    MYBROWSER="$(command -v surf 2>/dev/null)"
  elif [ -f "$(command -v arora 2>/dev/null)" ]; then
    MYBROWSER="$(command -v arora 2>/dev/null)"
  elif [ -f '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' ]; then
    MYBROWSER='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
  elif [ -f '/Applications/Firefox.app/Contents/MacOS/firefox-bin' ]; then
    MYBROWSER='/Applications/Firefox.app/Contents/MacOS/firefox-bin'
  elif [ -f '/Applications/Opera.app/Contents/MacOS/Opera' ]; then
    MYBROWSER='/Applications/Opera.app/Contents/MacOS/Opera'
  elif [ -f '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser' ]; then
    MYBROWSER='/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'
  elif [ -f '/Applications/Tor Browser.app/Contents/MacOS/firefox' ]; then
    MYBROWSER='/Applications/Tor Browser.app/Contents/MacOS/firefox'
  fi
fi
export BROWSER="$MYBROWSER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export terminal
if [ -z "$DISPLAY" ]; then
  if cmd_exists tmux; then
    MYTERMINAL="tmux new"
  elif cmd_exists screen; then
    MYTERMINAL="screen"
  else
    MYTERMINAL="$SHELL -c"
  fi
else
  if [ -f "$(command -v termite 2>/dev/null)" ]; then
    MYTERMINAL="termite"
  elif [ -f "$(command -v xfce4-terminal 2>/dev/null)" ]; then
    MYTERMINAL="xfce4-terminal"
  elif [ -f "$(command -v qterminal 2>/dev/null)" ]; then
    MYTERMINAL="qterminal"
  elif [ -f "$(command -v mate-terminal 2>/dev/null)" ]; then
    MYTERMINAL="mate-terminal"
  elif [ -f "$(command -v i3-sensible-terminal 2>/dev/null)" ]; then
    MYTERMINAL="i3-sensible-terminal"
  elif [ -f "$(command -v rofi-sensible-terminal 2>/dev/null)" ]; then
    MYTERMINAL="rofi-sensible-terminal"
  elif [ -f "$(command -v terminology 2>/dev/null)" ]; then
    MYTERMINAL="terminology"
  elif [ -f "$(command -v gnome-terminal 2>/dev/null)" ]; then
    MYTERMINAL="gnome-terminal"
  elif [ -f "/Applications/iTerm.app/Contents/MacOS/iTerm2" ]; then
    MYTERMINAL="/Applications/iTerm.app/Contents/MacOS/iTerm2"
  elif [ -f "/System/Applications/Utilities/terminal.app/Contents/MacOS/terminal" ]; then
    MYTERMINAL="/System/Applications/Utilities/terminal.app/Contents/MacOS/terminal"
  elif [ -f "$(command -v xterm 2>/dev/null)" ]; then
    MYTERMINAL="xterm"
  elif [ -f "$(command -v uxterm 2>/dev/null)" ]; then
    MYTERMINAL="uxterm"
  elif [ -f "$(command -v garcon-terminal-handler 2>/dev/null)" ]; then
    MYTERMINAL="garcon-terminal-handler"
  fi
fi
export TERMINAL="$MYTERMINAL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export file manager
if [ -z "$DISPLAY" ]; then
  if [ -f "$(command -v lf 2>/dev/null)" ]; then
    MYFILEMANAGER="lf"
  elif [ -f "$(command -v vifm 2>/dev/null)" ]; then
    MYFILEMANAGER="vifm"
  elif [ -f "$(command -v ranger 2>/dev/null)" ]; then
    MYFILEMANAGER="ranger"
  elif [ -f "$(command -v cfiles 2>/dev/null)" ]; then
    MYFILEMANAGER="cfiles"
  elif [ -f "$(command -v se 2>/dev/null)" ]; then
    MYFILEMANAGER="se"
  fi
else
  if [ -f "$(command -v caja 2>/dev/null)" ]; then
    MYFILEMANAGER="caja"
  elif [ -f "$(command -v thunar 2>/dev/null)" ]; then
    MYFILEMANAGER="thunar"
  elif [ -f "$(command -v Thunar 2>/dev/null)" ]; then
    MYFILEMANAGER="Thunar"
  elif [ -f "$(command -v spacefm 2>/dev/null)" ]; then
    MYFILEMANAGER="spacefm"
  elif [ -f "$(command -v nemo 2>/dev/null)" ]; then
    MYFILEMANAGER="nemo"
  elif [ -f "$(command -v pcmanfm 2>/dev/null)" ]; then
    MYFILEMANAGER="pcmanfm"
  elif [ -f "$(command -v polo 2>/dev/null)" ]; then
    MYFILEMANAGER="polo"
  elif [ -f "$(command -v nautilus 2>/dev/null)" ]; then
    MYFILEMANAGER="nautilus"
  elif [ -f "$(command -v polo 2>/dev/null)" ]; then
    MYFILEMANAGER="polo"
  elif [ -f "$(command -v dolphin 2>/dev/null)" ]; then
    MYFILEMANAGER="dolphin"
  elif [ -f "$(command -v konqueror 2>/dev/null)" ]; then
    MYFILEMANAGER="konqueror"
  fi
fi
if [[ "$(uname -s)" = Darwin ]]; then
  MYFILEMANAGER="open"
fi
export FILEMANAGER="$MYFILEMANAGER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# virtual machine manager
if [ -f "$(command -v VirtualBox 2>/dev/null)" ]; then
  MYVMMANAGER="VirtualBox"
elif [ -f "$(command -v VMWare 2>/dev/null)" ]; then
  MYVMMANAGER="VMWare"
elif [ -f "$(command -v virt-manager 2>/dev/null)" ]; then
  MYVMMANAGER="virt-manager"
elif [ -f "$(command -v kubectl 2>/dev/null)" ]; then
  MYVMMANAGER="kubectl"
elif [ -f "$(command -v docker 2>/dev/null)" ]; then
  MYVMMANAGER="docker"
fi
export VMMANAGER="$MYVMMANAGER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export torrent client
if [ -z "$DISPLAY" ]; then
  if [ -f "$(command -v transmission-remote 2>/dev/null)" ]; then
    MYTORRENT="transmission-remote"
  fi
else
  if [ -f "$(command -v transmission-remote-gtk 2>/dev/null)" ]; then
    MYTORRENT="transmission-remote-gtk"
  elif [ -f "$(command -v transmission-gtk 2>/dev/null)" ]; then
    MYTORRENT="transmission-gtk"
  elif [ -f "$(command -v transmission-cli 2>/dev/null)" ]; then
    MYTORRENT="transmission-cli"
  elif [ -f "$(command -v transmission-qt 2>/dev/null)" ]; then
    MYTORRENT="transmission-qt"
  elif [ -f "$(command -v deluge 2>/dev/null)" ]; then
    MYTORRENT="deluge"
  elif [ -f "$(command -v vuze 2>/dev/null)" ]; then
    MYTORRENT="vuze"
  elif [ -f "$(command -v qbittorrent)" ]; then
    MYTORRENT="qbittorrent"
  elif [ -f "$(command -v ktorrent 2>/dev/null)" ]; then
    MYTORRENT="ktorrent"
  elif [ -f "$(command -v ctorrent 2>/dev/null)" ]; then
    MYTORRENT="ctorrent"
  elif [ -f "$(command -v unworkable 2>/dev/null)" ]; then
    MYTORRENT="unworkable"
  elif [ -f "$(command -v rtorrent 2>/dev/null)" ]; then
    MYTORRENT="rtorrent"
  elif [ -f "$(command -v bitstormlite 2>/dev/null)" ]; then
    MYTORRENT="bitstormlite"
  elif [ -f "/Applications/Transmission.app/Contents/MacOS/Transmission" ]; then
    MYTORRENT="/Applications/Transmission.app/Contents/MacOS/Transmission"
  fi
fi
export TORRENT="$MYTORRENT"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export email client
if [ -z "$DISPLAY" ]; then
  if [ -f "$(command -v neomutt 2>/dev/null)" ]; then
    MYEMAIL="neomutt"
  elif [ -f "$(command -v mutt 2>/dev/null)" ]; then
    MYEMAIL="mutt"
  elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
    MYEMAIL="emacs"
  fi
else
  if [ -f "$(command -v thunderbird 2>/dev/null)" ]; then
    MYEMAIL="thunderbird"
  elif [ -f "$(command -v evolution 2>/dev/null)" ]; then
    MYEMAIL="evolution"
  elif [ -f "$(command -v clawsmail 2>/dev/null)" ]; then
    MYEMAIL="clawsmail"
  elif [ -f "$(command -v geary 2>/dev/null)" ]; then
    MYEMAIL="geary"
  elif [ -f "$(command -v kmail 2>/dev/null)" ]; then
    MYEMAIL="kmail"
  elif [ -f "$(command -v gmail 2>/dev/null)" ]; then
    MYEMAIL="mybrowser https://gmail.com"
  elif [ -f "$(command -v ymail 2>/dev/null)" ]; then
    MYEMAIL="mybrowser https://ymail.com"
  elif [ -f "$(command -v sylpheed 2>/dev/null)" ]; then
    MYEMAIL="sylpheed"
  fi
fi
export EMAIL="$MYEMAIL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export editor
if [ -z "$DISPLAY" ]; then
  if [ -f "$(command -v vim 2>/dev/null)" ]; then
    MYEDITOR="vim"
  elif [ -f "$(command -v nvim 2>/dev/null)" ]; then
    MYEDITOR="nvim"
  elif [ -f "$(command -v nano 2>/dev/null)" ]; then
    MYEDITOR="nano"
  elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
    MYEDITOR="emacs"
  fi
else
  if [ -f "$(command -v code-oss 2>/dev/null)" ]; then
    MYEDITOR="code-oss"
  elif [ -f "$(command -v code-insiders 2>/dev/null)" ]; then
    MYEDITOR="code-insiders"
  elif [ -f "$(command -v code 2>/dev/null)" ]; then
    MYEDITOR="code"
  elif [ -f "$(command -v vscode 2>/dev/null)" ]; then
    MYEDITOR="vscode"
  elif [ -f "$(command -v geany 2>/dev/null)" ]; then
    MYEDITOR="geany"
  elif [ -f "$(command -v gedit 2>/dev/null)" ]; then
    MYEDITOR="gedit"
  elif [ -f "$(command -v atom 2>/dev/null)" ]; then
    MYEDITOR="atom"
  elif [ -f "$(command -v brackets 2>/dev/null)" ]; then
    MYEDITOR="brackets"
  elif [ -f "$(command -v mousepad 2>/dev/null)" ]; then
    MYEDITOR="mousepad"
  elif [ -f "$(command -v emacs 2>/dev/null)" ]; then
    MYEDITOR="emacs"
  fi
fi
export EDITOR="$MYEDITOR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export git version format
export VERSION_DATE_FORMAT="%Y%m%d%H%M-git"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo config
export TODO_DIR="$HOME/.local/share/editors/todos"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo.sh config
export TODOSH_DIR="$HOME/.local/share/todo.sh"
export TODOTXT_CFG_FILE="$TODOSH_DIR/config"
export TODOTXT_FILE="$TODOSH_DIR/todo.txt"
export TODOTXT_DONE_FILE="$TODOSH_DIR/done.txt"
export TODOTXT_REPORT_FILE="$TODOSH_DIR/report.txt"
[ -d "$TODOSH_DIR" ] || mkdir -p "$TODOSH_DIR"
[ -f "$TODOTXT_CFG_FILE" ] || touch "$TODOTXT_CFG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export color
CLICOLOR="1"
GREP_COLORS='mt=38;5;220;1'
[ -f "$HOME/.config/misc/shell/other/ls" ] && . "$HOME/.config/misc/shell/other/ls"
[ -f "$HOME/.config/misc/shell/other/grep" ] && . "$HOME/.config/misc/shell/other/grep"
export CLICOLOR GREP_COLORS LS_COLORS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lf file manager icons
if [ -f "$(command -v lf 2>/dev/null)" ] && [ -f "$HOME/.config/misc/shell/other/lf" ]; then
  . "$HOME/.config/misc/shell/other/lf"
fi
export LF_ICONS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup wallpaper directory
export WALLPAPER_DIR="$HOME/.local/share/wallpapers"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup theme directory
export THEME_DIR="$HOME/.local/share/themes"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup icon directory
export ICON_DIR="$HOME/.local/share/icons"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup font directory
export FONT_DIR="$HOME/.local/share/fonts"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set term type
export TERM="screen-256color"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# logging
export DEFAULT_LOG="apps"
export LOGDIR="$HOME/.local/log"
export DEFAULT_LOG_DIR="$LOGDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set scripts path if installed manually
[ -d "$HOME/.local/share/scripts/bin" ] && PATH="$HOME/.local/share/scripts/bin:$PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#asciinema settings
export ASCIINEMA_API_URL="https://asciinema.org"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cheat.sh settings
export CHTSH_HOME="$HOME/.config/cheatsh"
[ -d "$CHTSH_HOME" ] || mkdir -p "$CHTSH_HOME"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# task warrior settings
export TASKRC="$HOME/.taskrc"
export TASKDATA="$HOME/.local/share/taskwarrior"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cursor
echo -e -n "\x1b[\x35 q" 2>/dev/null
echo -e -n "\e]12;cyan\a" 2>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# multi_clipboard
if [ -f "$(command -v multi_clipboard)" ]; then
  export SCREENEXCHANGE="$HOME/.screen-exchange"
  export SCREEN_MSGMINWAIT="1"
  export CLIPBOARD="$HOME/.clipboard"
  export CLMAXHIST="20"
  export CLSEP='\x07'
  if [ "$(uname -s)" = Linux ]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [ "$(uname -s)" = cygwin ]; then
    if command -v xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif command -v xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [ "$(uname -s)" = Darwin ]; then
    if command -v pbcopy >/dev/null 2>&1; then
      export CLXOS="pbcopy"
      export CLX="pbcopy"
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# MacOS fix
if [ "$(uname -s)" = Darwin ]; then
  HOMEBREW_INSTALL_BADGE="☕️ 🐸"
  HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export HOMEBREW_INSTALL_BADGE HOMEBREW_CASK_OPTS
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create directories
mkdir -p "$HOME/.local/bin"
mkdir -p "$HOME/.local/log"
mkdir -p "$HOME/.local/tmp"
mkdir -p "$HOME/.config/local"
mkdir -p "$HOME/.config/secure"
mkdir -p "$HOME/.local/share/wallpapers"
mkdir -p "$TMPDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# global functions
[ -f "$HOME/.config/shell/functions/global.sh" ] && . "$HOME/.config/shell/functions/global.sh"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# passmgr settings - add your passmgr setup here
[ -f "$HOME/.config/secure/passmgr.txt" ] && . "$HOME/.config/secure/passmgr.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# github settings - add github settings here
[ -f "$HOME/.config/secure/github.txt" ] && . "$HOME/.config/secure/github.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# gitlab settings - add gitlab settings here
[ -f "$HOME/.config/secure/gitlab.txt" ] && . "$HOME/.config/secure/gitlab.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# your private git - add your private git here
[ -f "$HOME/.config/secure/gitpriv.txt" ] && . "$HOME/.config/secure/gitpriv.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add your personal dotfiles repo here
[ -f "$HOME/.config/secure/personal.txt" ] && . "$HOME/.config/secure/personal.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# store API keys here
[ -f "$HOME/.config/secure/apikeys.txt" ] && . "$HOME/.config/secure/apikeys.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import local profile
[ -f "$HOME/.config/local/profile.local" ] && . "$HOME/.config/local/profile.local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import specific profiles for systems
[ -f "$HOME/.config/local/servers/$(hostname -s).local" ] && . "$HOME/.config/local/servers/$(hostname -s).local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# fix PATH
PATH="$(echo "$PATH" | tr ':' '\n' | grep -Fv '..' | awk '!seen[$0]++' | tr '\n' ':' | sed 's#::#:.#g')"
export PATH
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set profile as sourced
PROFILERCSRC="$HOME/.profile"
export PROFILERCSRC
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Autolanch application on ssh connection
if [ -n "$SSH_CONNECTION" ] && [ -f "$HOME/.config/misc/shell/other/ssh" ]; then
  . "$HOME/.config/misc/shell/other/ssh"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# unset unneeded vars

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
