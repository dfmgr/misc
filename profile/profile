#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# default path
OLDPATH="$PATH"
SYSBINDIR="/usr/local/bin"
USRBINDIR="$HOME/.local/bin"
PATH="$USRBINDIR:$SYSBINDIR:/usr/bin:/usr/local/sbin:/usr/sbin:/bin:/sbin:/usr/games"
export BINDIR="$USRBINDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set default prompt
# PS1="$USER@$(hostname -f 2>/dev/null):$(basename "$SHELL") # "
# export PS1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
export NODE_MANAGER="${NODE_MANAGER:-fnm}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# History
export HISTSIZE=1200
export HISTFILESIZE=1200
export SAVEHIST=4096
export HISTCONTROL=ignoredups:erasedups
export HISTIGNORE="[bf]g:exit:pwd:clear:q:!"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# sh specific
if [ -n "$SH_VERSION" ]; then
  export SHELL="$(which sh 2>/dev/null)"
# bash specific
elif [ -n "$BASH_VERSION" ]; then
  export SHELL="$(which bash 2>/dev/null)"
  export BASH_SILENCE_DEPRECATION_WARNING="1"
  export OSH="$HOME/.local/share/bash/oh-my-bash"
  export BASH_COMPLETION_USER_DIR="$HOME/.local/share/bash-completion/completions"
  if [ -d "$HOME/.config/bash" ]; then
    export HISTFILE="$HOME/.config/bash/bash_history"
    if [ -f "$HOME/.bash_history" ]; then
      mv -f "$HOME/.bash_history" "$HISTFILE"
      history -r && history -a
    fi
  else
    export HISTFILE="$HOME/.bash_history"
  fi
  if [ -n "$(which direnv 2>/dev/null)" ]; then
    direnv hook bash >/dev/null 2>&1
  fi
  # cursor
  printf "\x1b[\x35 q" 2>/dev/null
  printf "\e]12;cyan\a" 2>/dev/null
# zsh specific
elif [ -n "$ZSH_VERSION" ]; then
  export SHELL="$(which zsh 2>/dev/null)"
  export ZDOTDIR="$HOME/.config/zsh"
  export ZSH_CACHEDIR="$HOME/.cache/oh-my-zsh"
  export ZSH="$HOME/.local/share/zsh/oh-my-zsh"
  export ZSH_CUSTOM="$HOME/.local/share/zsh/oh-my-zsh/custom"
  export ZSH_DISABLE_COMPFIX="${ZSH_DISABLE_COMPFIX:-true}"
  export HISTFILE="$HOME/.config/zsh/zsh_history"
  autoload -Uz compinit && compinit -i
  autoload -U +X bashcompinit && bashcompinit
  [ -n "$(which direnv 2>/dev/null)" ] && direnv hook zsh >/dev/null 2>&1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set umask
#umask 022
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setting the temp directory
export TMP="${TMP:-$HOME/.local/tmp}"
export TEMP="${TEMP:-$HOME/.local/tmp}"
export TMPDIR="${TMPDIR:-$HOME/.local/tmp}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set locale
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_PAPER="en_US.UTF-8"
export LC_NAME="en_US.UTF-8"
export LC_ADDRESS="en_US.UTF-8"
export LC_TELEPHONE="en_US.UTF-8"
export LC_MEASUREMENT="en_US.UTF-8"
export LC_IDENTIFICATION="en_US.UTF-8"
export LC_ALL="$LC_ALL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure display
if [ -n "$DISPLAY" ]; then
  if [ -n "$DISPLAY_LOW_DENSITY" ] && grep -siq chromium /proc/version; then
    export DISPLAY_LOW_DENSITY="$DISPLAY"
  fi
  if [ -n "$(which xrandr 2>/dev/null)" ]; then
    export RESOLUTION="$(xrandr --current 2>/dev/null | grep '\*' | uniq | awk '{print $1}')"
  fi
else
  export RESOLUTION="${RESOLUTION:-}"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# disable blank screen
if [ -n "$DISPLAY" ] && [ -n "$(which xset 2>/dev/null)" ]; then
  xset s off &>/dev/null
  xset -dpms &>/dev/null
  xset s off -dpms &>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# enable control alt backspace
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  export XKBOPTIONS="terminate:ctrl_alt_bksp"
  if [ -n "$(which setxkbmap 2>/dev/null)" ]; then
    setxkbmap -model pc104 -layout us -option "terminate:ctrl_alt_bksp" 2>/dev/null
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup modifiers
if [ -n "$DISPLAY" ] && [ -n "$DESKTOP_SESSION" ]; then
  if [ -n "$(which ibus 2>/dev/null)" ]; then
    export XMODIFIERS=@im=ibus
    export GTK_IM_MODULE=ibus
    export QT_IM_MODULE=ibus
  elif [ -n "$(which fcitx 2>/dev/null)" ]; then
    export XMODIFIERS=@im=fcitx
    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# xserver settings
if [ -n "$DISPLAY" ] && [ "$(uname -s)" = "Linux" ]; then
  if [ ! -f "$HOME/.Xdefaults" ]; then
    touch "$HOME/.Xdefaults"
  fi
  if [ -n "$(which xrdb 2>/dev/null)" ]; then
    xrdb -merge "$HOME/.Xdefaults" 2>/dev/null
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# XDG Settings
export LOGS_DIRECTORY="${LOGDIR:-$HOME/.local/log}"
export STATE_DIRECTORY="$HOME/.local/lib"
export CACHE_DIRECTORY="$HOME/.cache"
export RUNTIME_DIRECTORY="${XDG_RUNTIME_DIR:-/run/user/$UID}"
export CONFIGURATION_DIRECTORY="${CONFIGURATION_DIRECTORY:-$HOME/.config}"
export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$RUNTIME_DIRECTORY}"
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$CONFIGURATION_DIRECTORY}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ensure .gitconfig exists
if [ -f ~/.config/local/gitconfig.local ] && [ ! -f ~/.gitconfig ]; then
  cp -f "$HOME/.config/local/gitconfig.local" "$HOME/.gitconfig"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sudo prompt
export SUDO_PROMPT="$(printf "\t\t\033[1;31m")[sudo]$(printf "\033[1;36m") password for $(printf "\033[1;32m")%p: $(printf "\033[0m")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export gpg tty
export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
if [ -n "$(which gpg-agent 2>/dev/null)" ]; then
  gpg-agent --enable-ssh-support --daemon -q &>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export ssh
export SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-$HOME/.ssh/ssh_auth_sock}"
if [ -d "$HOME/.ssh" ] && ls "$HOME/.ssh"/id_* &>/dev/null; then
  for f in $(find "$HOME/.ssh"/id_* 2>/dev/null | grep -v '/*.pub'); do
    ssh-add -q "$f" &>/dev/null
  done
fi
if [ ! -S "$HOME/.ssh/ssh_auth_sock" ]; then
  if [ -n "$(which ssh-agent 2>/dev/null)" ]; then
    ssh-agent &>/dev/null
  fi
  if [ -n "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" "$HOME/.ssh/ssh_auth_sock" &>/dev/null
  fi
fi
[ -d "$HOME/.ssh/known_hosts.d" ] || mkdir -p "$HOME/.ssh/known_hosts.d"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use custom `less` colors for `man` pages.
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
#export LESS="-CQaix4"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Don't clear the screen after quitting a `man` page.
export MANPAGER="less -X"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add emacs to bin
if [ -d "$HOME/.emacs.d/bin" ]; then
  TMP_BIN_PATH="$HOME/.emacs.d/bin:$TMP_BIN_PATH"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# rpm devel
export QA_RPATHS="$((0x0001 | 0x0010))"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mpd server
export MPDSERVER="$(hostname -s 2>/dev/null)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set hostname
export HOSTNAME="$(hostname -f 2>/dev/null)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# notes settings
export NOTES_SERVER_NAME="development"
export NOTES_DIRECTORY="$HOME/.local/share/editors/notes"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create a banner
if [ -n "$(which figlet 2>/dev/null)" ]; then
  export BANNER="figlet -f banner"
elif [ -n "$(which toilet 2>/dev/null)" ]; then
  export BANNER="toilet -f mono9.tlf"
elif [ -n "$(which banner 2>/dev/null)" ]; then
  export BANNER="banner"
else
  export BANNER="echo -e"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup neovim
export NVIM_LISTEN_ADDRESS="${TMP:-/tmp}/nvim.${USER}.sock"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure lua - https://github.com/DhavalKapil/luaver
export LUAVER_HOME="$HOME/.local/share/misc/plugins/luaver"
export LUAROCKS_BIN="$HOME/.local/share/lua/luarocks/bin"
export LUAROCKS_PREFIX="$HOME/.local/share/lua/luarocks"
TMP_BIN_PATH="$LUAROCKS_BIN"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure asdf - https://asdf-vm.com
export ASDF_DIR="$HOME/.local/share/misc/plugins/asdf"
export ASDF_DATA_DIR="$HOME/.local/share/misc/plugins/asdf"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure basher - https://www.basher.it
export BASHER_ROOT="$HOME/.local/share/misc/plugins/basher"
TMP_BIN_PATH="$HOME/.local/share/misc/plugins/basher/bin:$TMP_BIN_PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# GO version Manager - https://github.com/moovweb/gvm
export GVM_ROOT="$HOME/.local/share/gvm"
[ -f "$GVM_ROOT/scripts/gvm-default" ] && . "$GVM_ROOT/scripts/gvm-default"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure GO
export GOPATH="$HOME/.local/share/go"
export GODIR="$GOPATH"
export GOBIN="$GOPATH/bin"
export GOCACHE="$HOME/.cache/go-build"
export TMP_BIN_PATH="$GOBIN:$TMP_BIN_PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure gofish - https://gofi.sh
export GOFISH_HOME="$HOME/.local/share/gofish"
export GOFISH_RIGS="$GOFISH_HOME/Rigs"
export GOFISH_CACHE="$HOME/cache/.gofish"
export GOFISH_BARREL="$GOFISH_HOME/Barrel"
export GOFISH_DEFAULT_RIG="$GOFISH_HOME/Rigs/github.com/fishworks/fish-food"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup ruby
GEM_HOME="$HOME/.local/share/gem"
GEM_PATH="$HOME/.local/share/gem"
TMP_BIN_PATH="$GEM_HOME/bin:$TMP_BIN_PATH"
export GEM_HOME GEM_PATH
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ruby Version Manager
export rvm_path="$HOME/.local/share/rvm"
if [ -f "$rvm_path/scripts/rvm" ]; then
  . "$rvm_path/scripts/rvm"
  . "$rvm_path/scripts/completion"
  TMP_BIN_PATH="$rvm_path/bin:$TMP_BIN_PATH"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Node
export NPM_PACKAGES="$HOME/.local/share/nodejs/modules"
export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
if [ -n "$(which node 2>/dev/null)" ]; then
  TMP_BIN_PATH="$NPM_PACKAGES/bin:$TMP_BIN_PATH"
  npm config set prefix "$NPM_PACKAGES"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Fast Node Manager
export FNM_BIN="$USRBINDIR"
export FNM_DIR="$HOME/.local/share/nodejs/fnm"
if [ -n "$(builtin type -P fnm 2>/dev/null)" ]; then
  eval $(fnm env 2>/dev/null)
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# node version manager
export NVM_DIR="$HOME/.local/share/nodejs/nvm"
export NVM_BIN="$USRBINDIR"
if [ -n "$(which nvm 2>/dev/null)" ]; then
  export NO_UPDATE_NOTIFIER="true"
  export NODE_REPL_HISTORY_SIZE=2000
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Deno
export DENO_INSTALL="$HOME/.local/share/deno"
TMP_BIN_PATH="$DENO_INSTALL/bin:$TMP_BIN_PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup python setV
export SETV_VIRTUAL_DIR_PATH="$HOME/.local/share/python/setvenv/"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup pipx
export PIPX_BIN_DIR="$USRBINDIR"
export PIPX_HOME="$HOME/.local/share/python/pipx"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# setup python virtualenvwrapper
export VIRTUALENVWRAPPER_VIRTUALENV_WORKON_CD="yes"
export VIRTUALENVWRAPPER_PIP="$(which pip3 2>/dev/null || which pip 2>/dev/null)"
export VIRTUALENVWRAPPER_VIRTUALENV="$(which venv 2>/dev/null || which virtualenv 2>/dev/null)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Add Rust/Cargo to the path
export RUST_HOME="$HOME/.local/share/rust"
export CARGO_HOME="$HOME/.local/share/cargo"
TMP_BIN_PATH="$TMP_BIN_PATH:$CARGO_HOME/bin:$RUST_HOME/bin"
[ -f "$CARGO_HOME/env" ] && . "$CARGO_HOME/env"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Use hub as git if installed
if [ -n "$(which hub 2>/dev/null)" ]; then
  eval "$(hub alias -s >/dev/null 2>&1)"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup vagrant
export VAGRANT_HOME="$HOME/.local/share/vagrant"
export TMP_BIN_PATH="$TMP_BIN_PATH:$VAGRANT_HOME/bin"
export VAGRANT_DEFAULT_PROVIDER="libvirt"
[ -d "$VAGRANT_HOME/bin" ] || mkdir -p "$VAGRANT_HOME/bin"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup dockerstarter
export DOCKERCONFDIR="${DOCKERCONFDIR:-$HOME/.config/dockstarter}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# DockerMGR settings
export DOCKERMGR_HOME="${DOCKERMGR_HOME:-$HOME/.local/share/srv/docker}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export browser
if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
  if [ -n "$(which lynx 2>/dev/null)" ]; then
    MYBROWSER="$(which lynx 2>/dev/null)"
  elif [ -n "$(which links 2>/dev/null)" ]; then
    MYBROWSER="$(which links 2>/dev/null)"
  fi
else
  if [ -n "$(which garcon-url-handler 2>/dev/null)" ]; then
    MYBROWSER="$(which garcon-url-handler 2>/dev/null) --url"
  elif [ -n "$(which firefox 2>/dev/null)" ]; then
    MYBROWSER="$(which firefox 2>/dev/null)"
  elif [ -n "$(which chromium 2>/dev/null)" ]; then
    MYBROWSER="$(which chromium 2>/dev/null)"
  elif [ -n "$(which google-chrome 2>/dev/null)" ]; then
    MYBROWSER="$(which google-chrome 2>/dev/null)"
  elif [ -n "$(which opera 2>/dev/null)" ]; then
    MYBROWSER="$(which opera 2>/dev/null)"
  elif [ -n "$(which epiphany-browser 2>/dev/null)" ]; then
    MYBROWSER="$(which epiphany-browser 2>/dev/null)"
  elif [ -n "$(which falkon 2>/dev/null)" ]; then
    MYBROWSER="$(which falkon 2>/dev/null)"
  elif [ -n "$(which midori 2>/dev/null)" ]; then
    MYBROWSER="$(which midori 2>/dev/null)"
  elif [ -n "$(which netsurf 2>/dev/null)" ]; then
    MYBROWSER="$(which netsurf 2>/dev/null)"
  elif [ -n "$(which surf 2>/dev/null)" ]; then
    MYBROWSER="$(which surf 2>/dev/null)"
  elif [ -n "$(which arora 2>/dev/null)" ]; then
    MYBROWSER="$(which arora 2>/dev/null)"
  elif [ -f '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' ]; then
    MYBROWSER='/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
  elif [ -f '/Applications/Firefox.app/Contents/MacOS/firefox-bin' ]; then
    MYBROWSER='/Applications/Firefox.app/Contents/MacOS/firefox-bin'
  elif [ -f '/Applications/Opera.app/Contents/MacOS/Opera' ]; then
    MYBROWSER='/Applications/Opera.app/Contents/MacOS/Opera'
  elif [ -f '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser' ]; then
    MYBROWSER='/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'
  elif [ -f '/Applications/Tor Browser.app/Contents/MacOS/firefox' ]; then
    MYBROWSER='/Applications/Tor Browser.app/Contents/MacOS/firefox'
  elif [ -n "$(which lynx 2>/dev/null)" ]; then
    MYBROWSER="$(which lynx 2>/dev/null)"
  elif [ -n "$(which links 2>/dev/null)" ]; then
    MYBROWSER="$(which links 2>/dev/null)"
  fi
fi
export BROWSER="$MYBROWSER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export terminal
if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
  if [ -n "$(which screen 2>/dev/null)" ]; then
    MYTERMINAL="screen"
  elif [ -n "$(which tmux 2>/dev/null)" ]; then
    MYTERMINAL="tmux new"
  fi
else
  if [ -n "$(which termite 2>/dev/null)" ]; then
    MYTERMINAL="termite"
  elif [ -n "$(which xfce4-terminal 2>/dev/null)" ]; then
    MYTERMINAL="xfce4-terminal"
  elif [ -n "$(which qterminal 2>/dev/null)" ]; then
    MYTERMINAL="qterminal"
  elif [ -n "$(which mate-terminal 2>/dev/null)" ]; then
    MYTERMINAL="mate-terminal"
  elif [ -n "$(which i3-sensible-terminal 2>/dev/null)" ]; then
    MYTERMINAL="i3-sensible-terminal"
  elif [ -n "$(which rofi-sensible-terminal 2>/dev/null)" ]; then
    MYTERMINAL="rofi-sensible-terminal"
  elif [ -n "$(which terminology 2>/dev/null)" ]; then
    MYTERMINAL="terminology"
  elif [ -n "$(which gnome-terminal 2>/dev/null)" ]; then
    MYTERMINAL="gnome-terminal"
  elif [ -f "/Applications/iTerm.app/Contents/MacOS/iTerm2" ]; then
    MYTERMINAL="/Applications/iTerm.app/Contents/MacOS/iTerm2"
  elif [ -f "/System/Applications/Utilities/terminal.app/Contents/MacOS/terminal" ]; then
    MYTERMINAL="/System/Applications/Utilities/terminal.app/Contents/MacOS/terminal"
  elif [ -n "$(which xterm 2>/dev/null)" ]; then
    MYTERMINAL="xterm"
  elif [ -n "$(which uxterm 2>/dev/null)" ]; then
    MYTERMINAL="uxterm"
  elif [ -n "$(which garcon-terminal-handler 2>/dev/null)" ]; then
    MYTERMINAL="garcon-terminal-handler"
  elif cmd_exists tmux; then
    MYTERMINAL="tmux new"
  elif cmd_exists screen; then
    MYTERMINAL="screen"
  else
    MYTERMINAL="$SHELL -c"
  fi
fi
export TERMINAL="$MYTERMINAL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export file manager
if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
  if [ -n "$(which lf 2>/dev/null)" ]; then
    MYFILEMANAGER="lf"
  elif [ -n "$(which vifm 2>/dev/null)" ]; then
    MYFILEMANAGER="vifm"
  elif [ -n "$(which ranger 2>/dev/null)" ]; then
    MYFILEMANAGER="ranger"
  elif [ -n "$(which cfiles 2>/dev/null)" ]; then
    MYFILEMANAGER="cfiles"
  elif [ -n "$(which se 2>/dev/null)" ]; then
    MYFILEMANAGER="se"
  fi
else
  if [ -n "$(which thunar 2>/dev/null)" ]; then
    MYFILEMANAGER="thunar"
  elif [ -n "$(which Thunar 2>/dev/null)" ]; then
    MYFILEMANAGER="Thunar"
  elif [ -n "$(which caja 2>/dev/null)" ]; then
    MYFILEMANAGER="caja"
  elif [ -n "$(which spacefm 2>/dev/null)" ]; then
    MYFILEMANAGER="spacefm"
  elif [ -n "$(which nemo 2>/dev/null)" ]; then
    MYFILEMANAGER="nemo"
  elif [ -n "$(which pcmanfm 2>/dev/null)" ]; then
    MYFILEMANAGER="pcmanfm"
  elif [ -n "$(which polo 2>/dev/null)" ]; then
    MYFILEMANAGER="polo"
  elif [ -n "$(which nautilus 2>/dev/null)" ]; then
    MYFILEMANAGER="nautilus"
  elif [ -n "$(which polo 2>/dev/null)" ]; then
    MYFILEMANAGER="polo"
  elif [ -n "$(which dolphin 2>/dev/null)" ]; then
    MYFILEMANAGER="dolphin"
  elif [ -n "$(which konqueror 2>/dev/null)" ]; then
    MYFILEMANAGER="konqueror"
  elif [ -n "$(which lf 2>/dev/null)" ]; then
    MYFILEMANAGER="lf"
  elif [ -n "$(which vifm 2>/dev/null)" ]; then
    MYFILEMANAGER="vifm"
  elif [ -n "$(which ranger 2>/dev/null)" ]; then
    MYFILEMANAGER="ranger"
  elif [ -n "$(which cfiles 2>/dev/null)" ]; then
    MYFILEMANAGER="cfiles"
  elif [ -n "$(which se 2>/dev/null)" ]; then
    MYFILEMANAGER="se"
  fi
fi
if [ "$(uname -s)" = Darwin ]; then
  MYFILEMANAGER="open"
fi
export FILEMANAGER="$MYFILEMANAGER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# virtual machine manager
if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
  if [ -n "$(which kubectl 2>/dev/null)" ]; then
    MYVMMANAGER="kubectl"
  elif [ -n "$(which docker 2>/dev/null)" ]; then
    MYVMMANAGER="docker"
  fi
else
  if [ -n "$(which virt-manager 2>/dev/null)" ]; then
    MYVMMANAGER="virt-manager"
  elif [ -n "$(which VMWare 2>/dev/null)" ]; then
    MYVMMANAGER="VMWare"
  elif [ -n "$(which VirtualBox 2>/dev/null)" ]; then
    MYVMMANAGER="VirtualBox"
  elif [ -n "$(which kubectl 2>/dev/null)" ]; then
    MYVMMANAGER="kubectl"
  elif [ -n "$(which docker 2>/dev/null)" ]; then
    MYVMMANAGER="docker"
  fi
fi
export VMMANAGER="$MYVMMANAGER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export torrent client
if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
  if [ -n "$(which transmission-remote 2>/dev/null)" ]; then
    MYTORRENT="transmission-remote"
  fi
else
  if [ -n "$(which transmission-remote-gtk 2>/dev/null)" ]; then
    MYTORRENT="transmission-remote-gtk"
  elif [ -n "$(which transmission-gtk 2>/dev/null)" ]; then
    MYTORRENT="transmission-gtk"
  elif [ -n "$(which transmission-cli 2>/dev/null)" ]; then
    MYTORRENT="transmission-cli"
  elif [ -n "$(which transmission-qt 2>/dev/null)" ]; then
    MYTORRENT="transmission-qt"
  elif [ -n "$(which deluge 2>/dev/null)" ]; then
    MYTORRENT="deluge"
  elif [ -n "$(which vuze 2>/dev/null)" ]; then
    MYTORRENT="vuze"
  elif [ -n "$(which qbittorrent 2>/dev/null)" ]; then
    MYTORRENT="qbittorrent"
  elif [ -n "$(which ktorrent 2>/dev/null)" ]; then
    MYTORRENT="ktorrent"
  elif [ -n "$(which ctorrent 2>/dev/null)" ]; then
    MYTORRENT="ctorrent"
  elif [ -n "$(which unworkable 2>/dev/null)" ]; then
    MYTORRENT="unworkable"
  elif [ -n "$(which rtorrent 2>/dev/null)" ]; then
    MYTORRENT="rtorrent"
  elif [ -n "$(which bitstormlite 2>/dev/null)" ]; then
    MYTORRENT="bitstormlite"
  elif [ -f "/Applications/Transmission.app/Contents/MacOS/Transmission" ]; then
    MYTORRENT="/Applications/Transmission.app/Contents/MacOS/Transmission"
  elif [ -n "$(which transmission-remote 2>/dev/null)" ]; then
    MYTORRENT="transmission-remote"
  fi
fi
export TORRENT="$MYTORRENT"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export email client
if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
  if [ -n "$(which neomutt 2>/dev/null)" ]; then
    MYEMAIL="neomutt"
  elif [ -n "$(which mutt 2>/dev/null)" ]; then
    MYEMAIL="mutt"
  elif [ -n "$(which emacs 2>/dev/null)" ]; then
    MYEMAIL="emacs"
  fi
else
  if [ -n "$(which thunderbird 2>/dev/null)" ]; then
    MYEMAIL="thunderbird"
  elif [ -n "$(which evolution 2>/dev/null)" ]; then
    MYEMAIL="evolution"
  elif [ -n "$(which clawsmail 2>/dev/null)" ]; then
    MYEMAIL="clawsmail"
  elif [ -n "$(which geary 2>/dev/null)" ]; then
    MYEMAIL="geary"
  elif [ -n "$(which kmail 2>/dev/null)" ]; then
    MYEMAIL="kmail"
  elif [ -n "$(which gmail 2>/dev/null)" ]; then
    MYEMAIL="mybrowser https://gmail.com"
  elif [ -n "$(which ymail 2>/dev/null)" ]; then
    MYEMAIL="mybrowser https://ymail.com"
  elif [ -n "$(which sylpheed 2>/dev/null)" ]; then
    MYEMAIL="sylpheed"
  elif [ -n "$(which neomutt 2>/dev/null)" ]; then
    MYEMAIL="neomutt"
  elif [ -n "$(which mutt 2>/dev/null)" ]; then
    MYEMAIL="mutt"
  elif [ -n "$(which emacs 2>/dev/null)" ]; then
    MYEMAIL="emacs"
  fi
fi
export EMAIL="$MYEMAIL"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export editor
if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
  if [ -n "$(which vim 2>/dev/null)" ]; then
    MYEDITOR="vim"
  elif [ -n "$(which nvim 2>/dev/null)" ]; then
    MYEDITOR="nvim"
  elif [ -n "$(which emananocs 2>/dev/null)" ]; then
    MYEDITOR="nano"
  elif [ -n "$(which emacs 2>/dev/null)" ]; then
    MYEDITOR="emacs"
  fi
else
  if [ -n "$(which code-oss 2>/dev/null)" ]; then
    MYEDITOR="code-oss"
  elif [ -n "$(which code-insiders 2>/dev/null)" ]; then
    MYEDITOR="code-insiders"
  elif [ -n "$(which code 2>/dev/null)" ]; then
    MYEDITOR="code"
  elif [ -n "$(which vscode 2>/dev/null)" ]; then
    MYEDITOR="vscode"
  elif [ -n "$(which geany 2>/dev/null)" ]; then
    MYEDITOR="geany"
  elif [ -n "$(which gedit 2>/dev/null)" ]; then
    MYEDITOR="gedit"
  elif [ -n "$(which atom 2>/dev/null)" ]; then
    MYEDITOR="atom"
  elif [ -n "$(which brackets 2>/dev/null)" ]; then
    MYEDITOR="brackets"
  elif [ -n "$(which mousepad 2>/dev/null)" ]; then
    MYEDITOR="mousepad"
  elif [ -n "$(which emacs 2>/dev/null)" ]; then
    MYEDITOR="emacs"
  elif [ -n "$(which vim 2>/dev/null)" ]; then
    MYEDITOR="vim"
  elif [ -n "$(which nvim 2>/dev/null)" ]; then
    MYEDITOR="nvim"
  elif [ -n "$(which nano 2>/dev/null)" ]; then
    MYEDITOR="nano"
  elif [ -n "$(which emacs 2>/dev/null)" ]; then
    MYEDITOR="emacs"
  fi
fi
export EDITOR="$MYEDITOR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export git version format
export VERSION_DATE_FORMAT="%Y%m%d%H%M-git"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo config
export TODO_DIR="$HOME/.local/share/editors/todos"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export todo.sh config
export TODOSH_DIR="$HOME/.local/share/todo.sh"
export TODOTXT_CFG_FILE="$TODOSH_DIR/config"
export TODOTXT_FILE="$TODOSH_DIR/todo.txt"
export TODOTXT_DONE_FILE="$TODOSH_DIR/done.txt"
export TODOTXT_REPORT_FILE="$TODOSH_DIR/report.txt"
[ -d "$TODOSH_DIR" ] || mkdir -p "$TODOSH_DIR"
[ -f "$TODOTXT_CFG_FILE" ] || touch "$TODOTXT_CFG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export color
export CLICOLOR="1"
export GREP_COLORS='mt=38;5;220;1'
[ -f "$HOME/.config/misc/shell/other/ls" ] && . "$HOME/.config/misc/shell/other/ls"
[ -f "$HOME/.config/misc/shell/other/grep" ] && . "$HOME/.config/misc/shell/other/grep"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lf file manager icons
if [ -n "$(which lf 2>/dev/null)" ] && [ -f "$HOME/.config/misc/shell/other/lf" ]; then
  . "$HOME/.config/misc/shell/other/lf"
fi
export LF_ICONS
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup wallpaper directory
export WALLPAPER_DIR="$HOME/.local/share/wallpapers"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup theme directory
export THEME_DIR="$HOME/.local/share/themes"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup icon directory
export ICON_DIR="$HOME/.local/share/icons"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup font directory
export FONT_DIR="$HOME/.local/share/fonts"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set term type
export TERM="screen-256color"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# logging
export DEFAULT_LOG="apps"
export LOGDIR="$HOME/.local/log"
export DEFAULT_LOG_DIR="$LOGDIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set scripts path if installed manually
[ -d "$HOME/.local/share/scripts/bin" ] && TMP_BIN_PATH="$HOME/.local/share/scripts/bin:$TMP_BIN_PATH"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#asciinema settings
export ASCIINEMA_API_URL="https://asciinema.org"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cheat.sh settings
export CHTSH_HOME="$HOME/.config/cheatsh"
[ -d "$CHTSH_HOME" ] || mkdir -p "$CHTSH_HOME"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# task warrior settings
export TASKRC="$HOME/.taskrc"
export TASKDATA="$HOME/.local/share/taskwarrior"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# multi_clipboard
if [ -n "$(which multi_clipboard 2>/dev/null)" ]; then
  export SCREENEXCHANGE="$HOME/.screen-exchange"
  export SCREEN_MSGMINWAIT="1"
  export CLIPBOARD="$HOME/.clipboard"
  export CLMAXHIST="20"
  export CLSEP='\x07'
  if [ "$(uname -s)" = Linux ]; then
    if which xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif which xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [ "$(uname -s)" = cygwin ]; then
    if which xsel >/dev/null 2>&1; then
      export CLXOS="xsel"
      export CLX="xsel"
    elif which xclip >/dev/null 2>&1; then
      export CLXOS="xclip"
      export CLX="xclip"
    fi
  elif [ "$(uname -s)" = Darwin ]; then
    if which pbcopy >/dev/null 2>&1; then
      export CLXOS="pbcopy"
      export CLX="pbcopy"
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# MacOS fix
if [ "$(uname -s)" = Darwin ]; then
  export HOMEBREW_INSTALL_BADGE="☕️ 🐸"
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cursor
echo -e -n "\x1b[\x35 q" 2>/dev/null
echo -e -n "\e]12;cyan\a" 2>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create directories
mkdir -p "$TMPDIR"
mkdir -p "$USRBINDIR"
mkdir -p "$HOME/.local/log"
mkdir -p "$HOME/.local/tmp"
mkdir -p "$HOME/.config/local"
mkdir -p "$HOME/.config/secure"
mkdir -p "$SETV_VIRTUAL_DIR_PATH"
mkdir -p "$HOME/.local/share/wallpapers"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# global functions
[ -f "$HOME/.config/shell/functions/global.sh" ] && . "$HOME/.config/shell/functions/global.sh"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# passmgr settings - add your passmgr setup here
[ -f "$HOME/.config/secure/passmgr.txt" ] && . "$HOME/.config/secure/passmgr.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# github settings - add github settings here
[ -f "$HOME/.config/secure/github.txt" ] && . "$HOME/.config/secure/github.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# gitlab settings - add gitlab settings here
[ -f "$HOME/.config/secure/gitlab.txt" ] && . "$HOME/.config/secure/gitlab.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# your private git - add your private git here
[ -f "$HOME/.config/secure/gitpriv.txt" ] && . "$HOME/.config/secure/gitpriv.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add your personal dotfiles repo here
[ -f "$HOME/.config/secure/personal.txt" ] && . "$HOME/.config/secure/personal.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# store API keys here
[ -f "$HOME/.config/secure/apikeys.txt" ] && . "$HOME/.config/secure/apikeys.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create env vars from shell files
if [ $(find -L "$HOME/.config/secure" -type f -name '*.sh' 2>/dev/null | grep '^' || false) ]; then
  cat "$HOME/.config/secure"/*.sh 2>/dev/null >"$HOME/.config/secure/env"
  [ -f "$HOME/.config/secure/env" ] && . "$HOME/.config/secure/env"
else
  rm -Rf "$HOME/.config/secure/env" &>/dev/null
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import local profile - override all other settings
[ -f "$HOME/.config/local/profile.local" ] && . "$HOME/.config/local/profile.local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import specific profiles for systems
[ -f "$HOME/.config/local/servers/$(hostname -s).local" ] && . "$HOME/.config/local/servers/$(hostname -s).local"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# fix PATH
SET_PATH="$(echo "$PATH" | tr ':' '\n' | sed 's|\.$||g' | grep -v '^$' | grep -Fv '..' | awk '!seen[$0]++' | sort -u | grep -v '^$' | grep -v "$HOME" | grep -v "$SYSBINDIR" | tr '\n' ':' | sed 's|:$||g')"
SET_TMP_PATH="$(echo "${TMP_BIN_PATH}" | tr ':' '\n' | sed 's|\:.$||g' | grep -v '^$' | grep -Fv '..' | awk '!seen[$0]++' | grep -v '^$' | grep "$HOME" | grep -v "$USRBINDIR" | tr '\n' ':' | sed 's|:$||g')"
export PATH="$USRBINDIR:$SET_TMP_PATH:$SYSBINDIR:$SET_PATH:."
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# set profile as sourced
export PROFILERCSRC="$HOME/.profile"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Autolaunch application on ssh connection
if [ -n "$SSH_CONNECTION" ]; then
  [ -f "$HOME/.config/misc/shell/other/ssh" ] && . "$HOME/.config/misc/shell/other/ssh"
  [ -f "$HOME/.config/local/ssh.launch" ] && . "$HOME/.config/local/ssh.launch"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# unset unneeded vars
unset SET_PATH SET_TMP_PATH TMP_BIN_PATH
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
